[{"content":"Why I want to play with the recently released Compose Hot reload feature by JetBrains. To do this I setup a Desktop compose project and picked a topic to draw and explore: Vaporwave Why? because Vaporwave is a curious Internet thing. It has a strong visual aesthetic that I wanted to recreate. It is intriguing. It is seems to be a fleeting transient phenomena: it is in the name vapor and wave and yet\u0026hellip; and yet we see it pop up in unexpected places. It is a form of hauntology: a cultural idea that returns from the past to haunt the present.\nThere will be ramblings interspersed and remixed with code, I will put the code at the beginning of the sections, so that you can easily skim if remix-rambling is not your thing. Yes, there is a matching repo. Yes, it is a mix of organic hand coding and AI enhancements. I will explain my process.\nBut first\nSetting up Hot Reload You need:\nA project that has a Compose desktop part. It can be stand alone or part of a multiplatform project Use a Kotlin version 2.1.20 or later Get the plugin and the latest version information and add it the place you keep your versions, like a toml file Setup the plugin in your build.gradle.kts Setup the foojay resolver Run the main application from the gutter icon or command line. something like ./gradlew runHot --mainClass MainKt --auto Optional extra make a run target for your particular main application if you have more than one See and example of each line in the sample repo Wow these instructions are vague! indeed things change quickly. Please follow the original repo. This post will date.\nOrigins and Sound track Vaporwave appeared as a music genre with a strong aesthetic, some say in 2010. The iconic album Floral Shoppe by Macintosh Plus is still available and makes a perfect sound track for inspecting the code or reading this article.\nGo ahead click the link and start the music. I\u0026rsquo;ll wait.\nAs we are on the cusp widespread changes in how we interact with technology, will we have nostalgia for the way we did thing in the olden days? Will we even remember how it really was?\nA-E-S-T-H-E-T-I-C Vaporwave is known for a strong aesthetic. Here is a jumpstart table with the technique and a note. Click on the image to see the code. or scroll for more detail\nImage Techniques Notes code Path on Canvas, Linear gradient brush Triangles are geometric shapes reminiscent of corporate logos of the eighties: an abstract shape that becomes a place holder for ambiguous concepts like digital consumerism code Canvas, Offset and Path, conversion of Offset to create perspective a magenta grid looks like something from a pixelated game: A technology that we recognise and remember imperfectly with nostalgia. It also has a black and white tiled version. code Image with a BitmapPainter, ColorFilter, colorMatrix, blur, The choice of pngs, dolphins and old tech cassettes. Greek sculptures to remind us of beauty ideals. Having these elements floating makes them look surreal. Using blur and color filters change what the look like to simulate old VHS errors. Remembering past technology imperfectly. Human and digital memory is fallable. code drawCircle filled with gradients with color stops and Color.Transparent a retro sunset in a perfect world remembered imperfectly code svg string converted to Path, transformation matrix to convert from original points to new composable references to idealised worlds of palm trees. Unreleastic and rendered in Neon code mesh gradient by sinasamaki pastel colors dreamy, sureal, floaty, very vaporwave code Skia Shader language, RuntimeShader, composeRenderEffect in a modifier digital artefacts degrade, bitrot and imperfect memories, glitches and remixes Fonts and Colours Pick some colours, not too many and stick with them. Pick some fonts, not too many and stick with them. I chose pastels for a dreamy, hazy vibe. There needs to be a pink and a teal, in my case Mulberry and RobinEggBlue.\nThe fonts were retro, reminiscent of arcade games but also glitched and damaged because digital artefacts degrade, nothing is immune to bitrot. The fonts are found on Google Fonts\nLet\u0026rsquo;s dig into a few of the details, shall we?\nVanishing Floor To get the ghostly magenta grid or the black and white tiling my inital prompt had Junie just drawing a bunch of squares. Not what I wanted at all, because as you will notice, the squares are slanted because of the one point perspective. With a bit of research I found a way to do a projection. Each point that starts a line or is a corner of a tile is converted into a point projected onto the canvas. The same projection function can be used whether we are drawing squares or lines. More info on one point perspective.\nCassettes, dolphins, statues and color shifts A selection of pngs. This is nothing new. What makes this part interesting is you can apply a filter to the image to modify any of the color or alpha channel. How it works is you provide a matrix of values. This matrix will then be applied to each pixel.\nThe matrix looks like this:\n[ a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t ] If you take a color [R, G, B, A] and apply the matrix you get this\nR\u0026#39; = a*R + b*G + c*B + d*A + e G\u0026#39; = f*R + g*G + h*B + i*A + j B\u0026#39; = k*R + l*G + m*B + n*A + o A\u0026#39; = p*R + q*G + r*B + s*A + t A matrix that inverse the image looks like this:\n[ -1, 0, 0, 0, 255, 0, -1, 0, 0, 255, 0, 0, -1, 0, 255, 0, 0, 0, 1, 0 ] This matrix gives a lot of power to change the original image.\nWe can also add a blur modifier and flip the images horizontally or vertically. Horizontal or vertical flip is achieved by adjusting the scale.\nMore in the official docs.\nSunset The clue to the retro sunset is in a combination of gradients with color stops and using Color.Transparent.\nval brushRetro = Brush.verticalGradient( colorStops = arrayOf( 0.0f to topColor, 0.43f to topColor, 0.43f to Color.Transparent, 0.45f to Color.Transparent, 0.45f to topColor, 0.57f to middleColor, 0.57f to Color.Transparent, 0.6f to Color.Transparent, 0.6f to middleColor, 0.7f to middleColor, 0.7f to Color.Transparent, 0.74f to Color.Transparent, 0.74f to middleColor, 0.84f to bottomColor, 0.84f to Color.Transparent, 0.9f to Color.Transparent, 0.9f to bottomColor, 1.0f to bottomColor ), startY = 0f, endY = height ) Palm tree svg It is possible to extract the points of a simple svg. Looking at the sample palm tree file find the following line.\nCopy the string into the code and convert it to a Path. The problem is the points are relative to the coordinate system and size of the svg image and not the resulting composable view. It needs to be transformed. The conversion is based on the original path and the destination composable.\nThe conversion code looks like this\nfun fromBoundsToComposeView( bounds: Rect = Rect(-1f, -1f, 1f, 1f), width: Float, height: Float ): Matrix { val originalWidth = bounds.right - bounds.left val originalHeight = bounds.bottom - bounds.top val scale = min(width / originalWidth, height / originalHeight) val newLeft = bounds.left - (width / scale - originalWidth) / 2 val newTop = bounds.top - (height / scale - originalHeight) / 2 val matrix = Matrix() matrix.translate(-newLeft, -newTop) matrix.scale(scale, scale) return matrix } Apply the resulting matrix to the image. path.transform(matrix)\nMesh Gradient There is a really useful mesh gradient modifier created by sinasamaki with a great writeup on how it works. Hot reload is useful for tuning the colors of the gradients. There is also a visual tool to set the gradient up.\nGlitches It is possible to use Skia Shaders with Compose. The setup is easy enough and the shader is copied into a string. I found a small glitch shader by Coolok on ShaderToy. Integration is straight forward by creating a runtime Shader.\nUnderstanding shader code is something else entirely. The core understanding is that shader code runs on every pixel, one by one. So the code has to make changes from the pixel perspective. The main entry point is mainImage. You get the pixel coordinates in a two dimensional vector, fragCoord and the code has to return the color of the pixel in a four dimensional vector (RGBA) in fragColor.\nHot reload is a useful tool to tweak and experiment with shaders to learn how they work. This playlist, on learning how to build shaders on ShaderToy, is a good resource to get started.\nEnter the AIs Of course I had help - Junie and AI assistent as well as Gemini for research.\nResearch with Gemini To orient me and to be sure I understood vaporwave, Gemini did a deep research report on the topic for me.\nPlans and execution with Junie make a list of compose techniques to explore make a list of vaporwave aesthetic elements create a readme and a guidelines file collect visual references, blog posts with code snippets, bitmaps, images, fonts and colours in a docs folder take each of the aesthetic elements and ask Junie to build one sample element and use it in a specific composable e.g. Build an equilateral triangle composable that draws on the Canvas and uses a gradient brush. Show and example of this composable in the SoloTriangle composable check, commit, tag and goto step 5 I didn\u0026rsquo;t let Junie just do the whole list. I prompted each element separately so that I could check it out and tweak it before I commited and tagged. I also started a fresh context and a new task for each step. This worked well because the guidelines.md and docs/look folder kept the continuity.\nInbetween questions with AI assistant While Junie was busy building things, I use the AI assistant to research info with oneshot questions for the next task. e.g. How do I draw a perspective grid that has a single vanishing point on a flat surface The answer was python code. I asked it to explain the python code. The chat session didn\u0026rsquo;t interfere with what Junie was doing. In my next prompt to Junie, I asked it to use the research I captured in a markdown file.\nUnderstanding everything with DeepWiki For more detailed understanding of the whole project, I fed it to DeepWiki. This helped to make sense of some opaque parts such as the glitch shader code.\nAll the things The final composition of all the pieces is a quick and dirty Box or two with everything inside.\nA fun way to showcase hot reload is to run the app, in my case ./gradlew runHot --mainClass MainKt --auto. Then in a separate terminal run the speedrun script. This script checks out a git tag in a series of git tags when you type enter in the terminal. Because the app is running auto updating hot reload, the changes appear progressively.\nTada! Live demo video coming to a browser near you soon.\n","date":"2025-06-09T12:52:55+02:00","image":"https://www.maiatoday.net/p/is-it-vaporwave-compose-hot-reload/vapor_hu_17f088d104f61ea.png","permalink":"https://www.maiatoday.net/p/is-it-vaporwave-compose-hot-reload/","title":"Is it vaporwave? - Compose Hot reload"},{"content":"Sunday afternoon. Perfect time to hang out with Junie. I want to refresh my memory on some Compose drawing techniques. I am not really in the mood for Googling. I don\u0026rsquo;t need a production ready app. I really just want to mess around. How far can I vibe code this. I\u0026rsquo;ll start off by setting Junie to brave mode.\nI added an image and some colours to the repo of a blank compose desktop project. I also put a copy of an older blogpost of mine with some drawing techniques. I set some ground rules with the first prompt and then just keep asking Junie to add things.\nCreate a guidelines file with the following information and update the README.md file. Let\u0026#39;s explore some visual techniques in this Kotlin multiplatform project. The aim is to go for variety of techniques. Feel free to use the canvas, brush, paint, gradient, lines, paths, rounded polygons, skia shaders, text, colours, shapes. Or anything that will create an interesting visual effect. Animations are not necessary but can be added. The project does not have a practical application other than to demonstrate how to create interesting visual elements and to have some fun. It is a visual tribute to the Studio Ghibli film, [My Neighbor Totoro](https://en.wikipedia.org/wiki/My_Neighbor_Totoro). * It does not need any tests * Layer all the visual techniques on the main composable screen. * Find the suggested fonts in the resources folder * Find inspiration in the docs/looks folder and in the docs/blogpost folder I think Junie got what I wanted to do, I never explained what Totoro looks like but it figured out something from the included inspiration image.\nThe early experiments needed some tweaking\nThe only time the project didn\u0026rsquo;t run was when Junie didn\u0026rsquo;t download the new fonts but I found the instructions on where to get the fonts added to the README.md. I had no real expectations so I\u0026rsquo;m pretty happy with the final result. Animating rain and clickable wobbling Totoro.\nNo explanations really what can I say I didn\u0026rsquo;t read the code 🙈, but you can. I can\u0026rsquo;t vouch for the conciseness nor the elegance. I\u0026rsquo;ll just post a selection of prompts and the final result.\nYour browser does not support the video tag. ","date":"2025-03-02T22:02:23+01:00","image":"https://www.maiatoday.net/p/vibecoding-a-totoro-tribute-with-junie/topTotoro_hu_4a7ac513911e470f.png","permalink":"https://www.maiatoday.net/p/vibecoding-a-totoro-tribute-with-junie/","title":"Vibecoding a Totoro tribute with Junie"},{"content":"I made something. I made a set of flash cards to practise and learn Kotlin coroutines. I call them KotlinFlashKards (with a K of course). This is the first of a series covering different topics.\nWhy create flash cards? Does this happen to you? You are writing some code, you know something is possible but you can\u0026rsquo;t remember exactly how to do it. By the time you have asked an AI or researched you have forgotten what it was you wanted to do in the first place.\nThere is a way to fix this. Learn and remember the key concepts you use often. One way to do this is to use flash cards. I learnt this from the book The Programmers Brain by Felienne Hermans\nHow does it work? The deck doesn\u0026rsquo;t replace the docs or a good book. It is an in IDE course in the form of a question, a hint that hides the answer and a code snippet with a test to explain the concept. It has four sections\nBasics - 18 cards Structured Concurrency - 12 cards Error handling - 7 cards Testing - 6 cards You can explore the sections in order or dip in and try tasks at random.\nStrategies to get the best out of the course? Repeat at regular intervals - Memories are built up if you repeat the flash cards at regular intervals. It is better to do a few lessons more often than to do many lessons in one sitting. You can do the course many times or choose which areas to practise.\nRecall the answer before peeking - It is important to try to recall the syntax first before looking at the hints or letting the IDE help you. This means you practise your recall of the memory.\nThink about the solution - For each question and answer you will remember it better too if you think of a practical place where you could use similar code.\nHow do I get it? You need:\na JetBrains IDE like Android Studio or Intellij Community edition the JetBrains Acadamy plugin installed Then do the following:\nBefore opening a project click on the Learn menu item on the left Click on New course In the Marketplace search for KotlinFlashKards and start the course. This will make a local instance of the course Have fun and explore, try figuring out the answers to the questions and don\u0026rsquo;t peek before you have thought a bit. If you mess up the code reset it with the reset button. (see screenshot) If you want to skip ahead use the arrow or the numbers. (see screenshot) What else can I do? Rate the course Give feedback Tell me if there are other topics you want flash cards on, I have a flows one coming out soon ","date":"2024-09-18T19:50:02+02:00","image":"https://www.maiatoday.net/p/flash-cards-for-coroutines-kotlinflashkards/banner_hu_e1b071f22e5acd7.jpg","permalink":"https://www.maiatoday.net/p/flash-cards-for-coroutines-kotlinflashkards/","title":"Flash cards for Coroutines -  KotlinFlashKards"},{"content":"Here\u0026rsquo;s the situation. You find a snippet of Kotlin code somewhere on the Internet or in a book. You want to try it out. What is the quickest path to messing with the code? Here are some recipes for some options. I sorted them from the quickest no tools and no project all the way through to all the tools and all the projects. I\u0026rsquo;ll provide info on how to add a library as dependencies if possible in each of the solutions.\nAll of the options are free except the Intelij Enterprise IDE one.\nDisclaimers:\nThis is not a complete guide, it is opinionated and it is a snapshot of the current state of the tools. Things always change and your favourite may not be listed. I tested most of these on my Mac so the solutions are Mac-centric. If you want to try them on another OS, you may need to fiddle and research a bit more. I usually code for myself or for mobile so no serverside or web code or docker containers. Quicklinks Here is an overview with links so you can jump directly to what suits your needs\nTools No project with project Browser Playground Datalore CLI Compile and run REPL Amper Gradle Fleet 👆 See CLI section 👆 Amper Gradle Intellij Community/Android Studio Scratch file Wizard IDE Intellij Enterprise (not free) Notebook See Intellij Community section Resources\nBrowser This recipe is for when you don\u0026rsquo;t have a computer where you can install things. Maybe you are on a tablet or you are in an internet cafe in an unknown place or borrowing your neighbours laptop. It is good for code snippets that use standard java or kotlin libraries and output text.\nPlayground You need A browser A website that can run code e.g. Kotlin playground Recipe open this website paste or type some code run Ctrl + R Adding dependencies A good way to see what you can add is to autocomplete an import statement. You have access to kotlin, kotlinx, java and javax. If you want to add other libraries you need to run your own instance of the kotlin playground with the libraries you need or you need to find an instance where this is supported. Not really recommended. I would just use an Amper project if you need dependencies.\nDatalore This solution is still Browser based. It is useful if you want to collect a few pieces of Kotlin code and you like a Notebook interface and the supported tools. There is a free tier of Datalore available.\nYou need A browser A Datalore login Recipe open this website and log in Open a new kotlin notebook and paste or type some code in a code cell click the run button Adding dependencies The trick with the autocomplete on import works here too. You have access to kotlin, kotlinx, java and javax. You can also add some select libraries like kandy with the %use magic word.\nCLI This is for people who are happy to run things on the command line. It doesn\u0026rsquo;t matter where the code is created, it could be vim or an echo command. Read more at the official kotlin docs.\nCompile and run The bare bones approach but it becomes a pain if you want to use libraries other than the standard ones or you want to split your code in more than one file.\nYou need A terminal A Java installation The kotlin compiler Recipe echo 'fun main() { println(\u0026quot;Hello, World\u0026quot;)}' \u0026gt; hello.kt kotlinc hello.kt -include-runtime -d hello.jar # compile the code and package it in a jar with a runtime java -jar hello.jar # run the jar with java Adding dependencies You need to add dependencies on the command line, this may be a pain as you probably need the jars to include them. (not recommended)\nREPL REPL stands for read-eval-print-loop. It is an interactive environment to run code. If you have the kotlin compiler installed you can simply run kotlinc and you will be in the REPL. ^C to kill it and exit. Use only for very transient experiments.\nGradle This recipe uses gradle to generate a template project. You can then add all the files and dependencies to the project.\nYou need A terminal A Java installation A gradle installation Recipe mkdir myNewProject; cd myNewProject gradle init # follow the prompts choosing application and kotlin and mostly defaults. See the screenshot for my choices. Every thing should be setup with the files in the app/src folder and gradlew script in the root of the project ./gradlew run # runs the project - on Mac/Linux or ./gradlew test to run tests Adding dependencies You can add dependencies in the app/build.gradle.kts file in the dependencies section. You need to explicitly add a dependency for stdlib and kotlinx libraries\nAmper Same as the gradle solution but using Amper. It gives a simpler more streamlined project. It can use gradle under the hood.\nYou need A terminal A Java installation A gradle installation Recipe mkdir myNewProject; cd myNewProject Pull a version of the amper cli with this command. Note the version number may change if you read this in the future. curl -fsSL -o amper \u0026quot;https://packages.jetbrains.team/maven/p/amper/amper/org/jetbrains/amper/cli/0.4.0/cli-0.4.0-wrapper?download=true\u0026quot; \u0026amp;\u0026amp; chmod +x amper ./amper init jvm-cli # to create a fresh jvm command line project ./amper run # to run the project The source is in src directly. It is a much shallower project structure.\nAdding dependencies You can add dependencies in the module.yaml file in the dependencies section. The syntax is like this:\ndependencies: - groupId:artifactId:version You need to explicitly add a dependency but you have access to stdlib and kotlinx libraries.\nIDE with a project or without This solution is for when you have the luxury of a computer where you can install tools such as Intellij, Fleet or Android Studio. These tools will come with prepackaged JDKs and wizards to get you going. You can of course use these tools with the CLI projects you created. They do offer a way to run code without having a project.\nFleet Fleet supports Amper and Gradle. Making new projects are still simplest with the command line instructions above. Then you can open the project in Fleet. The Fleet integration gives convenient run buttons in the gutter so you don\u0026rsquo;t need to any run configuration setup.\nYou need A project created on the CLI as in the previous step for Amper or Gradle A Fleet installation from Jetbrains Toolbox Recipe Open the root folder of the project in Fleet Navigate to the main method and use the gutter icon to run Adding dependencies Add libraries in the same way as the CLI projects.\nScratch file Scratch files are usefull for transient code. They live in a folder that is independent of the project that you are in and so can be seen from any project you open. They are only supported in Intellij and Android studio.\nYou need Intellij Community/Android Studio, I use the Jetbrains toolbox app Recipe Open the IDE and open any project or create a new kotlin one, this will setup a project but we won\u0026rsquo;t use it. Press Shift-Cmd-N to open a new scratch file, choose Kotlin Paste the code press Ctrl + R or the run button. See the screenshot. Adding dependencies It is possible to add dependencies but you need to add it to the module in the project and then update the run configuration of the scratch file. This is probably more useful if you have a project setup.\nIntellij Enterprise and Notebook Intellij Enterprise supports the Kotlin Notebook plugin. It is a similar experience as the Datalore experience. The useful thing about a Notebook in Intellij is that you can also access code you may have in the project.\nYou need Intellij Enterprise, I use the Jetbrains toolbox app The Kotlin Notebook plugin Recipe Open the IDE and open any project or create a new kotlin one, this will setup a project but we won\u0026rsquo;t use it. Press Cmd Shift A and choose Kotlin Notebook Paste the code in a new code cell press Shift +Enter or the run button. See the screenshot. Adding dependencies You can add dependencies like this: @file:DependsOn(\u0026quot;groupId:artifactId:version\u0026quot;)\nYou can use your own project files in the Notebook by adding the project files to the notebook.\nYou can include some dependencies like kandy by using the %use magic keyword.\nIDE all the way This is the gui-est and most complete solution. Also the solution if you want to build a project that you want to work on. Of course you can use the CLI options but you can let the wizard create a template for you.\nWizard The recipe is deceptively simple but I refer to the official docs for finer details. I suspect no-one reads this far anyway. The wizard makes a gradle project and but if you would like to use Amper you need a plugin.\nYou need Intellij /Android Studio, I use the Jetbrains toolbox app Recipe Open the IDE and open any project or create a new kotlin one Code and run Dependencies work the same way as the CLI projects. There is also a project view to add them\nWhat next? Hmm I hear you say \u0026ldquo;But I want to draw pictures or graphs - no more ascii for me\u0026rdquo;\nYou\u0026rsquo;ll have to wait for another blog post for more on that. This one is far too long already.\nIn the meantime you have all these places to run your code. Now you can can go learn more Kotlin at these resources:\nOfficial documentation kotlinlang.org\nkotlin youtube\nBooks Kotlin In Action, second edition\nAtomic Kotlin with matching training in the IDE\nFree courses Kotlin Bootcamp\nPractise: Puzzles, Koans and Katas Exercism Kotlin track\nAdvent of code\nKotlin Koans\nGilded Rose in Kotlin\nNewsletters Kotlin Weekly\nMore on Notebooks Notebook Demo\n","date":"2024-08-11T13:47:49+02:00","image":"https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/runKodee_hu_d1174f078a7924fb.png","permalink":"https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/","title":"50 ways to run some Kotlin code"},{"content":"How to build Wrapped 2023 in Compose Animation If I had to build the Spotify Wrapped 2023 animations in Compose, this is how I would do it. This blog post doesn\u0026rsquo;t reproduce the effects identically, but it shows some of the basic Compose animation techniques you could use. It uses Canvas drawing and especially the drawWithCache modifier. It also uses RoundedPolygon, various matrix transformations and looping animation techniques using infiniteRepeatable. There is a section about how to get a path from an svg file as well.\nI created three different techniques. The first is a simple box with an animating linear gradient and an animating offset. The second is a spiky star using a RoundedPolygon with colour stop gradient and some animations in a graphicsLayer. The last is a progressivly drawing line. As a bonus we\u0026rsquo;ll make a palette using unsplash.com and coolors.co Let\u0026rsquo;s start with the palette.\nPick a palette Pick an image from unsplash and pull some colours from the image. Here\u0026rsquo;s one I got. I then loaded it into coolors.co and picked some palette colours from the image.\nHere are the colours I picked:\nval Pasta = Color(0xFFE7D6CE) val OrangeSquash = Color(0xFFFD9B72) val Plumberry = Color(0xFF682084) val Aubergette = Color(0xFF421F7B) val SwimmingCap = Color(0xFF4FBBA5) val Cherry = Color(0xFFFC1946) val Sherbet = Color(0xFFD33BB9) val Licorice = Color(0xFF35192B) val Custard = Color(0xFFFEC05D) We can now use these everywhere as gradients or backgrounds and our animation will have a consistent look that matches the mood from the image.\nShimer pane - animating Linear Gradient For this sliding box we animate the offset with an infiniteRepeatable and we animate the offset of the LinearGradient. The colors of the gradient are chosen from the colors of our newly created palette. The linear gradient changes colour from corner to corner. By changeing the offset of the gradient it moves the gradient in the shape. If we then animate this offset it will make the colours move across the shape. The second animation is simply an x offset to slide the box in and out. You can look at the complete ShimmerPane function in the repo. This linear gradient trick is explained in detail in this blog post.\nIn the code snippet you can see how the linear gradient brush is created in the drawWithCache modifier and then the actual drawing happens in the lambda parameter of the onDrawBehind function.\nSpacer(modifier .offset(200.dp*slideIn, 0.dp) .drawWithCache { val brush = Brush.linearGradient( colors = paneColors, start = Offset(offset, offset), end = Offset(offset + deltaPx, offset + deltaPx), tileMode = TileMode.Repeated ) onDrawBehind { drawRect(brush = brush, style = Fill) } }) Spiky Splash - rotating RoundedPolygon with drawWithCache modifier The Spiky Splash shape is created with a RoundedPolygon with 14 vertices.\nval spikySplash = RoundedPolygon.star( numVerticesPerRadius = 14, innerRadius = 0.4f, innerRounding = CornerRounding(radius = 0.1f) ) The trick with the RoundedPolygon is that it is created in a canonical rectangle that ranges from -1 to 1 both the x and the y axis. To be able to see it we need to transform it. Also the transformation needs to happen using the Android View Matrix, not the Compose matrix. The transformation looks like this:\nfun fromBoundsToView( bounds: RectF = RectF(-1f, -1f, 1f, 1f), width: Float, height: Float ): Matrix { val originalWidth = bounds.right - bounds.left val originalHeight = bounds.bottom - bounds.top val scale = min(width / originalWidth, height / originalHeight) val newLeft = bounds.left - (width / scale - originalWidth) / 2 val newTop = bounds.top - (height / scale - originalHeight) / 2 val matrix = Matrix() matrix.setTranslate(-newLeft, -newTop) matrix.postScale(scale, scale) return matrix } This matrix can be used to transform the RoundedPolygon into the hosting view. When we draw this polygon we need to first transform it with the matrix and then convert it to a compose path. The transformation happens in the drawWithCache modifier so that it is cached.\nHere is just the drawWithCache modifier:\n.drawWithCache { val matrix = fromBoundsToView(width = size.width, height = size.height) val sizedSpikySplash = RoundedPolygon(spikySplash).apply { transform(matrix) } val spikyBrush = Brush.radialGradient(colorStops = colorStops) onDrawBehind { drawPath( path = sizedSpikySplash .toPath() .asComposePath(), brush = spikyBrush ) } } It is coloured with a radial gradient with stops so that the colours make more distinct bands. Full spiky splash source here\nThe animation is pretty standard, infiniteTransition changing then rotation angle.\nval spikyTransition = rememberInfiniteTransition(label = \u0026#34;spiky transition\u0026#34;) val rotate by spikyTransition.animateFloat( initialValue = 45f, targetValue = -45f, animationSpec = infiniteRepeatable( animation = tween(4_000, easing = FastOutSlowInEasing), repeatMode = RepeatMode.Reverse ), label = \u0026#34;Spiky rotate \u0026#34; ) We use the rotation angle in a graphicsLayer modifier because we don\u0026rsquo;t need to redraw the spiky splash, we only need to rotate it. We also change the shape to be more oval in this snippet by scaling it to half the size in the y axis.\n.graphicsLayer { scaleY = 0.5f rotationZ = rotate } Scribble drawing - path, matrix transform, flattened path How to get a path from svg Create some scribbles in a package like inkscape or any drawing package that will let you save an svg. Don\u0026rsquo;t make it complicated, literally just draw a line with the pencil. Then open the svg with a text editor. You can open the svg displayed here and see what it looks like. You are looking for a line that starts with something like \u0026lt;path style=\u0026quot;fill:none;...\nCopy everything in the d=\u0026quot;... section as a string and paste it into your code.\nTransforming the path with the matrix The matrix transformation is very similar to the RoundedPolygon one, but\u0026hellip; we now need the Compose Matrix not the Android view one. Also the bounds of the path are no longer -1,1 for both x and y. We can get the bounds of the path and use it to make a matrix to size the scribble to fit the view.\nDrawing the path If we just draw the path as is, it will draw the whole path and not progressively draw it. There is a neat trick as shown in this video at timestamp 31:36.\nScribble draw the path with flattened lines The clue is we split the whole path up into short sections, little lines, which we draw one after the other. The line of code where this happens is\nval lines = path.asAndroidPath().flatten(0.5f) The 0.5f parameter in the flatten call is the error that the flatten call allows, 0.5 is half a pixel. You can also see we need to convert again to an AndroidPath because the flatten method is only available on Android paths. We animate a progress variable so we can loop from say 0% to 10% and so on up to 100% and then start again. Then in the modifier onDrawBehind function lambde we loop through the lines and draw only those lines up to a the progress variable. The animation is caused by only some of the path subsections being drawn and more and more of them being drawn as the progerss increases.\nCombining everything Since these different elements are all built in their own composable. We can put them all together remembering that the Composables that are drawn first will be at the bottom.\n@Composable fun Giggle(modifier: Modifier = Modifier) { Box(modifier.background(Sherbet)) { ShimmerPane( Modifier .height(280.dp) .width(250.dp) ) Daisy(colors = listOf(SwimmingCap, Licorice)) SpikyScribble( colors = listOf(Cherry, Licorice), modifier = Modifier .offset(-150.dp, 400.dp) ) Bean(colors = listOf(Custard, OrangeSquash), modifier = Modifier .fillMaxSize() ) SpikySplash( Modifier .size(500.dp) .offset(100.dp, 400.dp) ) } } That\u0026rsquo;s a wrap Here\u0026rsquo;s the repo\nand here\u0026rsquo;s the demo\nYour browser does not support the video tag. What\u0026rsquo;s next This experiment is by no means complete. This is what I could try out next:\nFigure out what is up with the scribble line transform that makes it sometimes cut off at the bottom Make the scribble lines more like the real thing by figuring out how to make the gradient draw along the line Figure out a way to do the blocky scribble Draw some album art and add text Make a circular calendar with a bezier or RoundedPolygon animating graph Make sliding in blinds effect Get real data from the Spotify API and expand the animations But hey, there is always more to learn and explore.\nIf you want to get a step by step walkthrough of concepts such as these with some theory discussions and a practise repo, check out my droidcon academy coffee break codelab titled Draw and Animate on Canvas with Jetpack Compose in Android\nReferences Alejandra\u0026rsquo;s Medium article on animating linear gradient brush\nChet\u0026rsquo;s article on Rounded Polygons\nRebecca\u0026rsquo;s video on drawing text as a flattened path and more\nRebecca\u0026rsquo;s gist for the scribble lines\n","date":"2023-12-09T17:18:17+02:00","image":"https://www.maiatoday.net/p/how-to-build-wrapped-2023-in-compose-animation/wrappedBanner_hu_92bf08e3f9affd39.png","permalink":"https://www.maiatoday.net/p/how-to-build-wrapped-2023-in-compose-animation/","title":"How to build Wrapped 2023 in Compose Animation"},{"content":"Hammer and nail There is no doubt LiveData is an easy, lifecycle safe way to observe some state which needs to be displayed on the UI. It is just so easy to create and easy to update. It is easy to observe. I think that may be why people use it everywhere where they need a simple observation. This ok, no guilt, no harm \u0026hellip;. for the UI layers \u0026hellip;. but there are better solutions for domain and data layers. This is not the first time this topic has come up yet I still see Live Data in a repository offered as a good solution from time to time, in blog posts, samples and in books. I think it is a case of people think they only have a LiveData hammer.\nThere are infact pitfalls if you use LiveData in a repository. I think it\u0026rsquo;s an anti-pattern.\nBut why not LiveData is lifecycle aware - do we need this in our repository? Repostitories are typically provided by dependency injection, they could be singletons and they don\u0026rsquo;t need to know about the Android lifecycle.\nLiveData always runs on the main thread, you can\u0026rsquo;t change this. This is not what we want in a repository. Repositories often work with different data sources which could involve network or disk access tasks. I would argue that you need to be able to run these kinds of tasks on the correct dispatcher if your libraries do not already do this. This is the deal breaker for me because you can cause jank in the UI if you do this incorrectly.\nLiveData does have some capabilities to combine and convert LiveData variables with MediatorLiveData but flows provide a wide variety of elegant operators to choose from. This is probably not a solid argument more a case of convenience.\nLastly, one of the biggest reasons after the main thread argument, why I would advocate for converting all of the LiveData use to flows: flows are part of the Kotlin coroutines library. This means they run on any platform where Kotlin coroutines run. You can use them in a multiplatform project. Or to put it differently, if you use flows in your repository instead of LiveData it is one less Android library that you have to remove and replace when you want to use the repository on another platform.\nConversion Replace LiveData with StateFlow and MutableLiveData with MutableStateFlow\nprivate val _error: MutableLiveData\u0026lt;String?\u0026gt; = MutableLiveData(null) val error: LiveData\u0026lt;String?\u0026gt; = _error becomes\nprivate val _error: MutableStateFlow\u0026lt;String?\u0026gt; = MutableStateFlow(null) override val error: StateFlow\u0026lt;String?\u0026gt; = _error.asStateFlow() and then fix the pieces that don\u0026rsquo;t compile. It may be some header imports and some changes in the places where the LiveData was observed but the compiler will help you.\nPutting a value into the StateFlow StateFlow always needs an initial value. So you will need to do that when you declare the StateFlow. Then to change the value you simply set it.\n_error.value = \u0026#34;Ooops!!!\u0026#34; Collecting flows To get the values out of the LiveData you need to collect the StateFlow. Depending over which architecture layer you are observing the data it may look slightly different.\nIn a view model If you simply need to collect the flow from a repository you can do it like this:\nfun onRefresh() { viewModelScope.launch { repository .someOrOtherFlow .collect { result -\u0026gt; doSomething(result) } } } Combining flows If you had a situation where you were using MediatorLiveData, there are many flow intermediate operators to choose from which you can use to convert and combine flows. I will show an example of where two observables were combined. In the LiveData world you would have achieved this by using addSource() on the MediatorLiveData. Here is the flow solution:\nval uiState = flow1.combine(flow2) { value1, value2 -\u0026gt; // this block is called if either flow1 or flow2 emits // it then emits a new value in a flow UiState(value1, value2) } // it is a flow so convert it to a StateFlow .stateIn( scope = viewModelScope, // provide a scope for the flow to be shared in started = WhileSubscribed(5000), // controls when the sharing is started, in this case starts when there is a subscriber and stops 5 seconds after the last one is no longer subscribed initialValue = UiState() ) UI - Compose Use the handy collectAsStateWithLifecycle() function.\nval error by viewModel.error.collectAsStateWithLifecycle() UI - XML There is a good writeup on how to do that here but the code snippet is this:\nlifecycleScope.launch { repeatOnLifecycle(Lifecycle.State.STARTED) { // Flow will be collected when the lifecycle is Started // and collection is stopped when the lifecycle is STOPPED viewModel.error.collect { // use the updated error message } } } Testing Testing StateFlow can sometimes feel tricky because they use coroutines to do their magic especially if you are doing something with the dispatchers in your repositories. The kotlinx coroutines test library has good support to help with the testing scenarios you may encounter. Here are some scenarios I encountered.\nMy test doesn\u0026rsquo;t pass Everything looks fine but the test fails because the value in the StateFlow isn\u0026rsquo;t what you expect it to be. Writing a test that does something on a coroutine means that you might find yourself in a position where you try to check the value of the StateFlow before the coroutine completes. The solution to this is to call advanceUntilIdle() which will make sure the coroutines get a chance to complete before you assert the value of the StateFlow.\nMy test won\u0026rsquo;t stop running StateFlow is a hot flow. Depending on how it was created, e.g. using a stateIn gives a parameter to prevent the StateFlow from being started until someone subscribes. You need to subscribe/collect the StateFlow to get any data from it. Now the hot flow is well, hot. This will stop the test from completing. My initial instinct was to get the job on which the StateFlow was collected and kill it at the end of the tests. Luckily there is an easier solution. The kotlinx coroutines test libraries provide a backgroundScope. If you kick off the flow collection on this scope, it will be cleared at the end of the test and the test will complete.\nShow me the code @Test fun `GIVEN a uiState WHEN the state is collected THEN it should have the right value`() = runTest { backgroundScope.launch(UnconfinedTestDispatcher(testScheduler)) { // this will use the backgroundScope viewModel.uiState.collect {} } assertEquals(viewModel.uiState.value, \u0026lt;something that looks like empty goes here\u0026gt;) viewModel.doSomethingThatWillChangeTheState() advanceUntilIdle() // this makes sure the coroutines complete assertEquals(\u0026lt;some new state goes here\u0026gt;, viewModel.uiState.value) // because of backgroundScope use the job of the hot StateFlow will be cancelled and the test can complete } Or you can use the test library Turbine\nPut down the hammer and try another tool At the 2019 Android Dev Summit Jose Alcérreca said “LiveData was never designed as a fully fledged reactive streams builder”. Since StateFlow is almost a drop in replacement, there is really nothing to stop people from migrating or just not using LiveData in Repositories.\nThe Android documentation also says don\u0026rsquo;t put LiveData in the repositories.\nAh but you say you use databinding\u0026hellip; My condolences\u0026hellip; but it\u0026rsquo;s ok, databinding supports StateFlow.\nYour project is in Java\u0026hellip; sob\u0026hellip; my condolences. Use LiveData or RxJava or convert to Kotlin.\nMore info Sketch note overview of how flows work\ndroidcon academy course on how to do the migration with a sample project\nOfficial documentation StateFlow and SharedFlow\nTesting flows\nDetailed writeup of more migration techniques\nVideos Collecting flows in a lifecycle aware manner\nUntangling coroutine testing\n","date":"2023-07-30T21:38:36+02:00","image":"https://www.maiatoday.net/p/i-still-see-livedata-where-are-the-flows/hammer_hu_3491782a3bc5b51c.png","permalink":"https://www.maiatoday.net/p/i-still-see-livedata-where-are-the-flows/","title":"I still see LiveData - where are the Flows?"},{"content":"The story starts I was wandering around my day job\u0026rsquo;s code base and I happened on a time capsule - a pristine Java Activity studded with semi-colons, a snapshot of how we built things in 2014. All the member variables started with m and there was plenty of logic to update the screen and dictate actions. Despite being old, it\u0026rsquo;s still used every day by users. Why would I change it?\nThe Bus disappears Well, it got its data from a subscription to the Otto Bus. Otto Bus was deprecated in 2016. A blog post suggested migrating to RxJava, but since our code base standard now involves coroutines, Flows, and in some cases, LiveData, I decided to remove deprecated libraries and complete the partial migrations we started some time ago.\nThis blog post summarizes how to migrate from Otto Bus to Flow.\nI\u0026rsquo;ve also created a Git repo with a simplified example that uses Otto Bus, with a conversion to Flow in the commit history. Check out the otto-bus tag for the working Otto Bus version and the flow tag for the converted Flow version. I am sparing you the Java to Kotlin conversions. This toy app lets you tap on the 8 ball for a message. It uses Otto Bus to notify the 8 Ball that a new message is needed as well as when a new message is available.\nHow to tackle the migration - step by step Here are the basic steps for this kind of migration:\nPick one event Find All the producers of this event (hopefully, there is only one but don\u0026rsquo;t count on it) Replace with compatible functionality. We\u0026rsquo;ll look at how to choose compatible functionality in the next section. Things will be broken. Find all subscribers of this event by looking for @Subscribe annotations. Replace with a matching access mechanism. Things should work at this point. Test that everything that used this one event still works Repeat with the next event until there are no events left to migrate Remove the Otto bus and it\u0026rsquo;s dependencies Celebrate! Of course this looks deceptively simple. As simple as it is to add otto bus to a code base. It may require some architectural refactors and modifications of how the dependency injection works in your app. Also if you were using otto bus to drive navigation, a Flow is not the right solution. I suspect the swamp you find yourself in is larger, deaper and much much more tangled. To this I would say, I hold you in my thoughts and I hope you have tests.\nWhy is the bus in the app I do have some advice on choosing an alternative implementation. It depends on why the otto bus was introduced in the app in the first place. The thing to understand is that the event bus pattern allows multiple producers to drop events into the bus from all over the app. On the other side of the bus any number of subscribers can wait for a particular event without knowing the origin of the event. This extreme loose coupling is handy however it means\nnothing is stopping you from coding up something unmaintainable in large projects it is difficult to follow the logic it is difficult to write tests For each of the events in your case ask yourself these questions.\nAsync observable state Was the bus used to observe a state in an asynchronous way? If this is the case, you can replace the bus with an observer pattern using a StateFlow. The producer and subscriber will be more tightly coupled but you will get cognitive support from clearer architecture. You will also get some IDE support and autocomplete to help you. You will need to look at the architecture or the dependency injection to make sure the subscriber has access to the producer so it can collect the StateFlow.\nSynchronous notification Was the bus used to notify one area in the code that something happened elsewhere? If this is synchronous then a simple method call may suffice. Again you will need to look at the architecture and the dependency injection to make sure the class notifying has access to the class that provides the method. Wrapping the class that receives the notification in an interface will make testing this code easier.\nI really really really need a bus If the bus was legitimately used because you have many places in the app that need to respond to an event, you can recreate the bus functionality with a singleton and a SharedFlow. Inject the Bus into all the classes that need it and provide the SharedFlow from the injected class. Then subscribers can collectLatest on the SharedFlow and filter for the events they are interested in. Provide a method to emit something on the bus. There is a branch in the sample repo with a simple implementation of this.\ninterface FlowBus { val bus: SharedFlow\u0026lt;BusEvent\u0026gt; suspend fun post(event: BusEvent) } object BusModule: FlowBus { private val _bus = MutableSharedFlow\u0026lt;BusEvent\u0026gt;(replay = 0) override val bus: SharedFlow\u0026lt;BusEvent\u0026gt; get() = _bus override suspend fun post(event: BusEvent) { _bus.emit(event) } } The BusEvent is a sealed class.\nsealed class BusEvent data class MessageFromTheAether(val answer: String) : BusEvent() object ShakeItUp : BusEvent() None of this will work for me You can always resort to using a Broadcast receiver to send a message from one part of your app to another. One thing to note if you go this route is that you will only be able to use this solution in the Android app and not in shared Kotlin only modules.\nExample in the repo - Easy swap to StateFlow For my toy example the producer that emits data is the Magic8Ball. Instead of posting an event on the bus, make the data available in a StateFlow.\nBusModule.bus.post(MessageFromeTheAether(latestMessage)) is replaced with\nprivate val _answer = MutableStateFlow(\u0026#34;\u0026#34;) val answer: StateFlow\u0026lt;String\u0026gt; get() = _answer.asStateFlow() // and then later when a new message is needed _answer.value = latestMessage In my example the subscriber of the data is the ViewModel.\n@Subscribe fun revealAnswer(message: MessageFromeTheAether) { _uiState.value = Reveal(message.answer) } is replaced with this snippet in typically the init block of the view model\nviewModelScope.launch { eightBall.answer.collect { answer -\u0026gt; _uiState.value = Reveal(answer) } } Here is the matching video showing all the code changes.\n","date":"2023-07-17T19:18:36+02:00","image":"https://www.maiatoday.net/p/swampy-refactor-converting-otto-bus-to-flows/swampyBus_hu_340e552fdb7e58b0.png","permalink":"https://www.maiatoday.net/p/swampy-refactor-converting-otto-bus-to-flows/","title":"Swampy Refactor: Converting Otto Bus to Flows"},{"content":"Once upon a time I admit. I have a penchant for word games and weird segues. So I will tell you what this post is about off the bat. You can skip to the code, I won\u0026rsquo;t be offended. Fleet 1.19 was released this week with an integrated AI assistant. I took it for a spin and used it to convert Kotlin code from imperative style to functional and back again. I used some Kotlin code, which solves the Advent of Code 2022 Day 10 puzzle. I had written the solution in two styles and I had the AI assistant do the same conversion and compared the code. And then I played around and generated some poetry. Follow links at your peril, there are rabbit holes, it might make you late or change the size of your free time.\nSegue the first of many Oh you are still here! You didn\u0026rsquo;t jump to the code starts here section? Why am I doing this? A long time ago, I read a lot of Lewis Caroll, Alice in Wonderland. In one scene Alice talks to the Mock Turtle. He sings a song about sea creatures dancing. When the first language translators appeared on the scene, Altavisa babelfish or perhaps it was the early Google Translate, I converted passages from Alice in Wonderland to French and then back again to see what the machines could do. The Mock Turtle was transformed into an Imitation Tortoise. In this way the reference to the original mock turtle soup was lost in translation. In a roundabout way I was wondering what would be uncovered or lost if I used the AI assistant for some translations in coding style.\nCouplets of doggerel My trusty and non emotional assistant had no opinion on Lewis Caroll but it made this for me. A definition of functional programming style in rhyming couplets:\nFunctional programming\u0026rsquo;s way,\ntreats functions as the play.\nImmutable states they use,\nside effects they refuse.\nDeclarative code is their choice,\nwith functions, they rejoice.\nNested functions map, filter, reduce,\na clean, elegant code they produce.\nCompare this with the imperative version:\nImperative code, step by step,\ncommands the flow, with every rep.\nVariables mutate, tracking state,\nloops and branches, integrate.\nIn sequence order, let it be,\nline-by-line, instructions see.\nProcedural paths and simple tweaks,\nIt\u0026rsquo;s the classic style, for codes that speak.\nPshaw! verbose doggerel you respond, ok here\u0026rsquo;s \u0026hellip; a haiku\n5-7-5 Functional\nFunctions pure, combined, (5)\nImmutable state and grace, (7)\nElegance defined. (5)\nImperative\nCommands in sequence, (5)\nChanging state and execution, (8! or is it 7?)\nSteps guide its progress. (5)\nCode starts here Imperative all the way - hand crafted by me Here is my initial hand written imperative solution to the AoC 2022 Day 10 CRT problem. There are many succinct and elegant solutions by other people out there. For this exploration, the changing shape of the code is what interests me. Also to know if the solution is good it needs to have the same output on my input set. import java.io.File fun main(args: Array\u0026lt;String\u0026gt;) { val crtW = 40 val crtH = 6 data class Instruction(val ticks: Int = 1, val inc: Int = 0) fun crtDisplay(input: List\u0026lt;String\u0026gt;) { val instructions: List\u0026lt;Instruction\u0026gt; = buildList { // transform a list of Strings to a list of Instructions for (s in input) { // transform String to Instruction val opcode = s.substringBefore(\u0026#34; \u0026#34;) val instruction = when (opcode) { \u0026#34;noop\u0026#34; -\u0026gt; Instruction() \u0026#34;addx\u0026#34; -\u0026gt; Instruction(ticks = 2, inc = s.substringAfter(\u0026#34; \u0026#34;).toInt()) else -\u0026gt; error(\u0026#34;oops\u0026#34;) } this.add(instruction) } } val xRegisterAtTick: List\u0026lt;Int\u0026gt; = buildList { // transform instructions to x register values var x = 1 // needs a running x register value for (i in instructions) { repeat(i.ticks) { this.add(x) } x += i.inc } this.add(x) } for (i in 0 until (crtW * crtH)) { // transform xRegister values to pixels(String) // chop up in lines // side effect: print pixels if (i.mod(crtW) == 0) print(\u0026#34;\\n\u0026#34;) //\u0026lt;============ side effect print(if (i.mod(crtW) in xRegisterAtTick[i] - 1..xRegisterAtTick[i] + 1) \u0026#34;🔴\u0026#34; else \u0026#34;⚫️\u0026#34;) //\u0026lt;============ side effect } } val testInput = readInput(\u0026#34;Day_test\u0026#34;) println(\u0026#34; ============== test input =============\u0026#34;) crtDisplay(testInput) println(\u0026#34;\\n\\n\u0026#34;) println(\u0026#34;============== real input ==============\u0026#34;) val input = readInput(\u0026#34;Day\u0026#34;) crtDisplay(input) println(\u0026#34;\\n\\n\u0026#34;) } fun readInput(name: String) = File(\u0026#34;src/main/resources/\u0026#34;, \u0026#34;$name.txt\u0026#34;).readLines() The recipe You can see my conversion steps in the git repo. The recipe is:\nIngredients:\n1 problem 1 working imperative solution tests to taste Method:\nSeparate the variables that change from the code that does something. Separate the side effect code from the code that does something. Chop the doing code, identified in the previous steps, into bite sized chunks and wrap in small pure functions. Replace loops with composed calls such as map, filter, reduce calling the pure functions as higher order functions as needed to obtain the same result as the original. Build gently for a few seconds in a preheated gradle command, until BUILD SUCCESSFUL and serve immediately.\nOf course this recipe is an over simplification and build times may vary depending on how big the code is and if you are doing this on a Rasberry PI model B.\nHere\u0026rsquo;s one I prepared earlier - hand written and functional import java.io.File fun main(args: Array\u0026lt;String\u0026gt;) { val crtW = 40 data class Instruction(val ticks: Int = 1, val inc: Int = 0) fun String.toInstruction() = when (substringBefore(\u0026#34; \u0026#34;)) { \u0026#34;noop\u0026#34; -\u0026gt; Instruction() \u0026#34;addx\u0026#34; -\u0026gt; Instruction(ticks = 2, inc = substringAfter(\u0026#34; \u0026#34;).toInt()) else -\u0026gt; error(\u0026#34;oops\u0026#34;) } fun Instruction.expandInstruction(): List\u0026lt;Int\u0026gt; = buildList { repeat(this@expandInstruction.ticks - 1) { this.add(0) } this.add(this@expandInstruction.inc) } fun Int.toPixel(index: Int, width: Int = crtW): String = if (index % width in this - 1..this + 1) \u0026#34;🔴\u0026#34; else \u0026#34;⚫️\u0026#34; fun crtScan(input: List\u0026lt;String\u0026gt;, width: Int = crtW): List\u0026lt;String\u0026gt; = input.map { it.toInstruction() }// converts input to instruction .flatMap { i -\u0026gt; i.expandInstruction() } // expands multi tick instructions .runningFold(1) { x, i -\u0026gt; x + i } // runs through the instructions accumulating x .mapIndexed { index, x -\u0026gt; x.toPixel(index) } // converts index and x register to a pixel .chunked(width).map { it.joinToString(\u0026#34;\u0026#34;) } // spilt into lines for the screen fun List\u0026lt;String\u0026gt;.display() { // side effect method this.forEach { println(it) } } val testInput = readInput(\u0026#34;Day_test\u0026#34;) println(\u0026#34; ============== test input =============\u0026#34;) crtScan(testInput).display() println(\u0026#34;============== real input ==============\u0026#34;) val input = readInput(\u0026#34;Day\u0026#34;) crtScan(input).display() println(\u0026#34;\\n\\n\u0026#34;) } fun readInput(name: String) = File(\u0026#34;src/main/resources/\u0026#34;, \u0026#34;$name.txt\u0026#34;).readLines() AI converts to functional AI Assistant converts my imperative version to functional\nmport java.io.File fun main(args: Array\u0026lt;String\u0026gt;) { val crtW = 40 val crtH = 6 data class Instruction(val ticks: Int = 1, val inc: Int = 0) fun parseInstruction(s: String): Instruction { val opcode = s.substringBefore(\u0026#34; \u0026#34;) return when (opcode) { \u0026#34;noop\u0026#34; -\u0026gt; Instruction() \u0026#34;addx\u0026#34; -\u0026gt; Instruction(ticks = 2, inc = s.substringAfter(\u0026#34; \u0026#34;).toInt()) else -\u0026gt; error(\u0026#34;oops\u0026#34;) } } fun buildXRegisterAtTick(instructions: List\u0026lt;Instruction\u0026gt;): List\u0026lt;Int\u0026gt; { var x = 1 // needs a running x register value return instructions.flatMap { instruction -\u0026gt; List(instruction.ticks) { x }.apply { x += instruction.inc } } + x } fun printCRT(input: List\u0026lt;String\u0026gt;) { val instructions = input.map(::parseInstruction) val xRegisterAtTick = buildXRegisterAtTick(instructions) val crtRows = (crtW * crtH until 0 step -crtW).reversed().map { lineStart -\u0026gt; (lineStart until lineStart + crtW).joinToString(\u0026#34;\u0026#34;) { i -\u0026gt; if (i % crtW in xRegisterAtTick[i] - 1..xRegisterAtTick[i] + 1) \u0026#34;🔴\u0026#34; else \u0026#34;⚫️\u0026#34; } } println(crtRows.joinToString(\u0026#34;\\n\u0026#34;)) } val testInput = readInput(\u0026#34;Day_test\u0026#34;) println(\u0026#34; ============== test input =============\u0026#34;) printCRT(testInput) println(\u0026#34;\\n\\n\u0026#34;) println(\u0026#34;============== real input ==============\u0026#34;) val input = readInput(\u0026#34;Day\u0026#34;) printCRT(input) println(\u0026#34;\\n\\n\u0026#34;) } fun readInput(name: String) = File(\u0026#34;src/main/resources/\u0026#34;, \u0026#34;$name.txt\u0026#34;).readLines() Oh dear, this doesn\u0026rsquo;t work! Some issue with the loop not using a downTo and getting the ranges wrong. I like the separate functions but it is mixing in some side effects.\nAI converts back to imperative AI assistant converts my functional version to imperative\nimport java.io.File fun main(args: Array\u0026lt;String\u0026gt;) { val crtW = 40 val crtH = 6 data class Instruction(val ticks: Int = 1, val inc: Int = 0) fun parseInstruction(s: String): Instruction { val opcode = s.substringBefore(\u0026#34; \u0026#34;) return when (opcode) { \u0026#34;noop\u0026#34; -\u0026gt; Instruction() \u0026#34;addx\u0026#34; -\u0026gt; Instruction(ticks = 2, inc = s.substringAfter(\u0026#34; \u0026#34;).toInt()) else -\u0026gt; error(\u0026#34;oops\u0026#34;) } } fun buildXRegisterAtTick(instructions: List\u0026lt;Instruction\u0026gt;): MutableList\u0026lt;Int\u0026gt; { val xRegisterAtTick = mutableListOf\u0026lt;Int\u0026gt;() var x = 1 // needs a running x register value for (instruction in instructions) { for (i in 0 until instruction.ticks) { xRegisterAtTick.add(x) } x += instruction.inc } xRegisterAtTick.add(x) return xRegisterAtTick } fun printCRT(input: List\u0026lt;String\u0026gt;) { val instructions: MutableList\u0026lt;Instruction\u0026gt; = mutableListOf() for (s in input) { instructions.add(parseInstruction(s)) } val xRegisterAtTick = buildXRegisterAtTick(instructions) for (i in 0 until (crtW * crtH)) { if (i % crtW == 0) print(\u0026#34;\\n\u0026#34;) if (i % crtW in xRegisterAtTick[i] - 1..xRegisterAtTick[i] + 1) { print(\u0026#34;🔴\u0026#34;) } else { print(\u0026#34;⚫️\u0026#34;) } } } val testInput = readInput(\u0026#34;Day_test\u0026#34;) println(\u0026#34; ============== test input =============\u0026#34;) printCRT(testInput) println(\u0026#34;\\n\\n\u0026#34;) println(\u0026#34;============== real input ==============\u0026#34;) val input = readInput(\u0026#34;Day\u0026#34;) printCRT(input) println(\u0026#34;\\n\\n\u0026#34;) } fun readInput(name: String) = File(\u0026#34;src/main/resources/\u0026#34;, \u0026#34;$name.txt\u0026#34;).readLines() The end To close I leave you with a git repo and these lines of sage advice in doggerel format from the AI assistant. What can I say, I am amused!\nFunctional\u0026rsquo;s not a cure-all,\nFor some problems, it may stall.\nYet, grasp its ways, and you\u0026rsquo;ll see,\nCleaner code and clarity.\nIncorporate with grace and skill,\nMore maintainable code, you\u0026rsquo;ll build.\nAnd as a bonus here\u0026rsquo;s the prompt that generated this gem.\nTake the coding advice in quotes and convert it to rhyming couplets \u0026#34;Keep in mind that functional programming may not always be the best choice for every problem or coding style, but understanding and incorporating functional concepts can help create cleaner, more maintainable code.\u0026#34; ","date":"2023-06-10T15:12:44+02:00","image":"https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/mock_and_me_hu_e4367506e42f3dfd.jpg","permalink":"https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/","title":"The Imitation Tortoise's song - a fleety conversion from imperative to functional - Will you join the dance?"},{"content":"Android Makers by droidcon 2023 was a lovely well sized conference. Big enough to hear some interesting talks and small enough to make new friends. Here is my talk and also the stream of the app clinic session.\n","date":"2023-04-27T21:46:32+02:00","image":"https://www.maiatoday.net/p/amxdc23/amxdc23_hu_1df96c9bef751f1c.jpeg","permalink":"https://www.maiatoday.net/p/amxdc23/","title":"AMxDC23"},{"content":"I shared my talk titled Imperative, Declarative, Object oriented, functional: Four of a Kotlin Kind at the I code Java conference.\nThe abstract: Is Kotlin a functional language? Yes, but\u0026hellip; Is it object oriented? Yes, but\u0026hellip; Looking at four concepts: imperative, declarative, functional and object oriented How does Kotlin make it easy to use either or all at the same time. This talk contains: Some useful Kotlin tips, some guidelines and pitfalls for the four concepts, traces of definitions and software history. After listening to this talk you will understand what these concepts are, what each is good for and how they are supported by the Kotlin language.\nYou can see the talk here\n","date":"2022-10-14T10:30:41+02:00","image":"https://www.maiatoday.net/p/four-of-a-kotlin-kind-at-i-code-java-2022-conference/icj2022_hu_15cc9953a906f322.jpg","permalink":"https://www.maiatoday.net/p/four-of-a-kotlin-kind-at-i-code-java-2022-conference/","title":"Four of a Kotlin Kind at I code Java 2022 conference"},{"content":" Droidcon Berlin 22 what a blast!\nI presented a talk on Compose. I spoke on a panel and made fantastic new friends and caught up with old/online ones.\nThe panel discussion was about Android at Scale\nThe talk title was Something old, something new: adding Jetpack Compose to a large open source app.\nVideo\nvideo\nI also had a great time chatting to Matt and Madona about all sorts of Android and public speaking things.\n","date":"2022-07-06T19:38:47+02:00","image":"https://www.maiatoday.net/p/droidcon-berlin-22/dcbln22_hu_935101111e86e849.png","permalink":"https://www.maiatoday.net/p/droidcon-berlin-22/","title":"Droidcon Berlin 22"},{"content":"Droidcon SF 2022, first conference outside of South Africa after the lockdown years. I was so happy to be part of the speakers for my talk titled Something old, something new - adding Jetpack Compose to a large open source app\nHere\u0026rsquo;s the abstract:\nJetpack Compose is the new UI framework for Android from Google. Can I take an existing large open source Android app and get the benefit of what compose offers? This talk is a practical report of adding the new UI framework to an existing consumer app. The app I have chosen is Habitica the very popular habit tracking app.\nI am presenting this exploration as a travel diary of sorts. It will include:\nLay of the land: looking at the existing code architecture and assessing where best to add the new framework A map and a plan: opinions on architectural choices that make migration easier Lists and Columns: a practical demonstration of how to port existing UI Here be monsters: recounts of trials and tribulations of working with the existing code and the new framework Home again: a demo I made some lovely new friends, thanks Tasha for the photo.\nAlso the video and the slides\n","date":"2022-06-02T15:07:56-05:00","image":"https://www.maiatoday.net/p/droidcon-sf-22/droidconSF2022_hu_d9318c9443958133.jpg","permalink":"https://www.maiatoday.net/p/droidcon-sf-22/","title":"Droidcon SF 22"},{"content":"Another installment of the 90s web aesthetic experiments. In the 9Os animated cursors were all the rage. On a mobile device of course we don\u0026rsquo;t have the concept of a cursor. There are gestures that can be detected: touches and drags. So for this project I split up the following pieces to code:\nThe benefits of this approach are the animating composables can be reused as progress indicators or other elements that appear or disappear to reward customers on their actions.\nDetect gestures and draw a composable lambda on screen based on the gestures - CursorVisible Build a few animating composables An animating lifesaver candy /Sweet A pulsing pink and red heart Build a screen where I can switch the different animating composables in the CursorVisible composable Build pixie dust animation by repurposing my confitti code First of all I needed a Composeable which would take a content and could allow me to drag another composable around. Here\u0026rsquo;s the code for this. It makes the content visible and invisible on a tap and lets you drag the content.\n@Composable fun CursorVisible(content: @Composable () -\u0026gt; Unit) { val boxSize = 100.dp val boxPx = with(LocalDensity.current) { boxSize.toPx() } var offset by remember { mutableStateOf(Offset(0f, 0f)) } var visible by remember { mutableStateOf(false) } Box(modifier = Modifier .fillMaxSize() .pointerInput(Unit) { detectTapGestures { offset = it - Offset(boxPx/2, boxPx/2) visible = !visible } } ) { if (visible) { Box( Modifier .offset { offset.round() } .size(boxSize) .pointerInput(Unit) { detectDragGestures { change, dragAmount -\u0026gt; change.consumeAllChanges() offset += dragAmount } } ) { content() } } } } This CursorVisible can have content of anything. So I made a lifesaver sweet/candy that changes colour and a pulsing red and magenta heart.\nThe lifesaver is just circles and arcs drawn on the canvas and then some parameters such as angle and colour animated.\n@Composable fun LifeSaver(rainbow: List\u0026lt;Color\u0026gt; = SkittlesRainbow) { val color by rainbowState(rainbow = rainbow, duration = 2000) val highlight by rainbowState(PastelRainbow, 2000) val infiniteTransition = rememberInfiniteTransition() val arcAngle1 by infiniteTransition.animateFloat( initialValue = 0F, targetValue = 180F, animationSpec = infiniteRepeatable( animation = tween(5000, easing = LinearEasing), repeatMode = RepeatMode.Restart ) ) val arcAngle2 by infiniteTransition.animateFloat( initialValue = 180F, targetValue = 360F, animationSpec = infiniteRepeatable( animation = tween(5000, easing = LinearEasing), repeatMode = RepeatMode.Restart ) ) Canvas( modifier = Modifier .size(80.dp) ) { drawCircle( color = color, radius = 40.dp.toPx(), style = Stroke(width = 40.dp.toPx(), cap = StrokeCap.Round) ) drawCircle( color = highlight, radius = 24.dp.toPx(), style = Stroke(width = 2.dp.toPx(), cap = StrokeCap.Round) ) drawCircle( color = highlight, radius = 55.dp.toPx(), style = Stroke(width = 2.dp.toPx(), cap = StrokeCap.Round) ) drawArc( color = highlight, startAngle = arcAngle1, sweepAngle = 90f, useCenter = false, style = Stroke(width = 4.dp.toPx(), cap = StrokeCap.Round), ) drawArc( color = highlight, startAngle = arcAngle2, sweepAngle = 90f, useCenter = false, style = Stroke(width = 4.dp.toPx(), cap = StrokeCap.Round), ) } } There is a rainbowState that loops through a list of colours by using keyframes.\n@Composable fun rainbowState( rainbow: List\u0026lt;Color\u0026gt; = SkittlesRainbow, duration: Int = 3000 ): State\u0026lt;Color\u0026gt; { val infiniteTransition = rememberInfiniteTransition() val interval = duration / rainbow.size return infiniteTransition.animateColor( initialValue = rainbow[0], targetValue = rainbow.last(), animationSpec = infiniteRepeatable( animation = keyframes { durationMillis = duration var i = 0 for (color in rainbow) { color at i i += interval } }, repeatMode = RepeatMode.Restart ) ) } The pulsing heart is a heart shape which uses a looping animation that adjust the colour and the scale to get the pulsing effect.\nThe heart shape:\n// Thank You https://mahendranv.github.io/posts/compose-shapes-gists/ val HeartShape = GenericShape { size, _ -\u0026gt; val h = size.height val w = size.width lineTo(0.5f*w, 0.25f*h) cubicTo(0.5f*w, 0.225f*h, 0.458333333333333f*w, 0.125f*h, 0.291666666666667f*w, 0.125f*h) cubicTo(0.0416666666666667f*w, 0.125f*h, 0.0416666666666667f*w, 0.4f*h, 0.0416666666666667f*w, 0.4f*h) cubicTo(0.0416666666666667f*w, 0.583333333333333f*h, 0.208333333333333f*w, 0.766666666666667f*h, 0.5f*w, 0.916666666666667f*h) cubicTo(0.791666666666667f*w, 0.766666666666667f*h, 0.958333333333333f*w, 0.583333333333333f*h, 0.958333333333333f*w, 0.4f*h) cubicTo(0.958333333333333f*w, 0.4f*h, 0.958333333333333f*w, 0.125f*h, 0.708333333333333f*w, 0.125f*h) cubicTo(0.583333333333333f*w, 0.125f*h, 0.5f*w, 0.225f*h, 0.5f*w, 0.25f*h) close() } The shaped used in the heart:\n@Composable fun Heart(modifier: Modifier = Modifier, color: Color = Color.Red, size: Dp = 100.dp) { Surface( shape = HeartShape, color = color, modifier = modifier .height(size) .width(size) ) { } } And the animated pulsing heart:\n@Composable fun HeartPulse(modifier: Modifier = Modifier) { val infiniteTransition = rememberInfiniteTransition() val heartSize by infiniteTransition.animateFloat( initialValue = 0.5f, targetValue = 1.5f, animationSpec = infiniteRepeatable( animation = tween(1000, easing = FastOutSlowInEasing), repeatMode = RepeatMode.Reverse ) ) val heartColor by infiniteTransition.animateColor( initialValue = Color.Magenta, targetValue = Color.Red, animationSpec = infiniteRepeatable( animation = tween(1000, easing = FastOutSlowInEasing), repeatMode = RepeatMode.Reverse ) ) Heart(modifier.scale(heartSize), heartColor) } Last but not least the fairy/pixie dust. For this one I made a GlitterBox which would be the container for the glitter flecks. The state of the glitter and the glitter fleck code is a particle system similar to what I used in the confetti modifier. You can see that in action in the github repo or read the description in an older blog post.\nPutting it all together I have a simple outside box with a little magenta cursor box that can be dragged around on the screen. The position of the magenta box is fed into the particle system on the onDrag calls and the glitter flecks are generated.\nHere\u0026rsquo;s the glitter box:\n@Composable fun GlitterBox( rainbow: List\u0026lt;Color\u0026gt; = SkittlesRainbow, fleckCount: Int = 2, visible: Boolean = true ) { var size by remember { mutableStateOf(Size.Zero) } var source by remember { mutableStateOf(Offset(200f, 200f)) } var glitterState by remember { mutableStateOf( GlitterState( speed = 0.5f, colors = rainbow, glitterShape = GlitterShape.Mixed, fleckCount = fleckCount, source = source ) ) } var lastFrame by remember { mutableStateOf(-1L) } LaunchedEffect(visible) { while (visible \u0026amp;\u0026amp; isActive) { withFrameMillis { newTick -\u0026gt; val elapsedMillis = newTick - lastFrame val wasFirstFrame = lastFrame \u0026lt; 0 lastFrame = newTick if (wasFirstFrame) return@withFrameMillis glitterState.next(elapsedMillis) } } } Box( Modifier .fillMaxSize() .onSizeChanged { size = it.toSize() } ) { Canvas( modifier = Modifier .fillMaxSize() ) { glitterState = glitterState.sizeChanged(this.size) if (visible) { for (fleck in glitterState.flecks) { fleck.draw(drawContext.canvas) } } } Box( Modifier .offset { source.round() } .size(10.dp) .background(Color.Magenta) .pointerInput(Unit) { detectDragGestures { _, dragAmount -\u0026gt; val summed = source + dragAmount val newValue = Offset( x = summed.x.coerceIn(0f, size.width - 10.dp.toPx()), y = summed.y.coerceIn(0f, size.height - 10.dp.toPx()) ) source = newValue glitterState = glitterState.updateSource(source) } } ) } } And there you have it three 90s retro animated cursor inspired animations in Jetpack Compose. Read the whole project in this git repo.\n","date":"2022-05-24T22:11:19+02:00","image":"https://www.maiatoday.net/p/animated-pixie-dust-cursor-and-more/glitterBox_hu_da5fb5265cdf9a2d.png","permalink":"https://www.maiatoday.net/p/animated-pixie-dust-cursor-and-more/","title":"Animated Pixie Dust Cursor and more"},{"content":"This post is my companion sketch notes for all the resources I consumed on the topic of flows. It is not meant to replace the info that I found on the internet but rather supplement it. Nor is it complete or should it be a standalone guide. In fact you can find an excellent list of my favourite resources at the end of the article. It is a document that helps me make sense of the topic. With that disclaimer out of the way\u0026hellip;\nLet\u0026rsquo;s take a step back and look at the suspend function. If your coroutine knowledge is rusty, freshen that up first.\nWhat if we want to provide multiple values? A stream of values that can be observed? Enter flows. At their most basic, flows have a producer and a consumer.\nThe interface looks like this (spoiler it\u0026rsquo;s just suspend functions under the hood)\nThe consumer gets the multiple values by using a terminal operator.\nIf I need to change the produced values along the way before consuming them, there are transform operators.\nHow do I switch from main to io context?\nWhat\u0026rsquo;s with the hot and cold flows? How do I remember which is which?\nSome practical hot flows.\nFlows on Android\nReferences Kotlin Coroutines Flow in a nutshell\nKotlin Flows ~ an Android cheat sheet\nKotlin Flows in Android summary\nAndroid flow\nAsynchronous Flow | Kotlin\nFlow under the hood: how does it really work\nKotlinConf 2019: Asynchronous Data Streams with Kotlin Flow by Roman Elizarov\nKotlin Flows in a Nutshell\nFlowMarbles\nAndroid StateFlow and SharedFlow\nIf you are reading this far I will reward you with an Android portait.\n","date":"2022-04-27T18:16:06+02:00","image":"https://www.maiatoday.net/p/flow-notes/flowNotes_hu_8f80d216e5cd0c69.jpg","permalink":"https://www.maiatoday.net/p/flow-notes/","title":"Flow Notes"},{"content":"Wow my first in real life conference in two years with DevConf 2022 Presenting on Jetpack Compose and how it interoperates with an existing opensource Android app.\nFind the slides here\n","date":"2022-04-07T16:26:46+02:00","image":"https://www.maiatoday.net/p/devconf-22/oldNew_hu_87c7b7f9ea007a49.png","permalink":"https://www.maiatoday.net/p/devconf-22/","title":"Devconf 22"},{"content":"To practise for live speaking and to explore how to add Jetpack Compose to an existing open source app, I start a twitch stream as kibethcodes. The app I chose to work on is Habitica, a habit tracking/ToDo app that saw it\u0026rsquo;s first commit in 2015.\nStreaming Tuesdays at 19:00 UTC+2\nHere are a selection of highlights of the twitch stream.\n","date":"2022-03-02T21:38:36+02:00","image":"https://www.maiatoday.net/p/kibeth-codes-twitch-highlights-1/blank_hu_d7833027accb09dd.jpeg","permalink":"https://www.maiatoday.net/p/kibeth-codes-twitch-highlights-1/","title":"Kibeth Codes twitch highlights 1"},{"content":"At the moment people often ask me where to go start learning Jetpack Compose. Here is a a hand picked selection of my favourite Compose resources. These may change as I find new ones. There should be something for everyone, Official, Community, Videos, Books, Streams.\nOfficial docs Official Docs\nPathway\nOfficial apps Jetpack Compose Samples\nMaterial Catalog\nCommunity websites Jetpackcompose.app\ncompose.academy\nJetpack Compose Playground\nVideos Philip Lackner Compose playist\nCoding in Flow\nBooks Android UI Development with Jetpack Compose - Thomas Künneth\nPractical Jetpack Compose - Joe Birch\nCompose Internals - Jorge Castillo\nTwitch Coding with the Italians\nKibeth Codes\nAdam McNeilly\nFlorian Walther\nSpecialised areas Modifiers how it works\nState Animation ","date":"2022-02-28T21:43:48+02:00","image":"https://www.maiatoday.net/p/links-to-learn-compose/resources_hu_b6f224048c879d08.png","permalink":"https://www.maiatoday.net/p/links-to-learn-compose/","title":"Links to Learn Compose"},{"content":"A lighting talk for Jozi-JUG demonstrating Compose animation and demo on mobile and desktop.\nslides\n","date":"2022-02-28T21:13:06+02:00","image":"https://www.maiatoday.net/p/lightning-demo-of-compose-animation/introBunny_hu_b12045a0cd693966.png","permalink":"https://www.maiatoday.net/p/lightning-demo-of-compose-animation/","title":"Lightning Demo of Compose animation"},{"content":"Panel discussion hosted by GDG Cape Town. Interesting discussion at the end of the presentations by Nick and Thomas. Some topics that we discussed was ideas round structuring existing apps and where to put the compose parts, integrating with an existing theme and discussions about Thomas\u0026rsquo;s book.\n","date":"2022-02-24T20:34:09+02:00","image":"https://www.maiatoday.net/p/panel-talk-on-deep-dive-into-compose/bannerPanel_hu_e3b63bacd47887a9.png","permalink":"https://www.maiatoday.net/p/panel-talk-on-deep-dive-into-compose/","title":"Panel talk on Deep dive into compose"},{"content":"A evening of comparing animation in declarative frameworks. A speedrun of the animation system in Jetpack Compose as a comparison agains SwiftUI and Flutter. Hosted by GDG Nuremberg We discovered many similarites, all the systems have some way to control the animation graph, with somewhat confusing differences in naming. A tween in compose is not the same as a tween in Flutter. Flutter Tween is an animationSpec in Compose. Compose tween is a specific kind of Curve in Flutter that does a linear interpolation. Oh and its a function in Compose and an object in Flutter.\nSlides\n","date":"2022-02-22T20:41:06+02:00","image":"https://www.maiatoday.net/p/comparing-declarative-animation-frameworks/animateCompare_hu_2952d48af3621da7.png","permalink":"https://www.maiatoday.net/p/comparing-declarative-animation-frameworks/","title":"Comparing Declarative Animation frameworks"},{"content":"A broad strokes intro to Jetpack Compose followed by a live code demo taster of what it is like to use this framework. The demo ranges from basic use, a bit of Material components and one small animation. Hosted by DevUG. In the second part of the event, Thomas gives us a summary of what\u0026rsquo;s new in Jetpack Compose 1.1\nSlides\n","date":"2022-02-16T20:51:01+02:00","image":"https://www.maiatoday.net/p/intro-to-compose-live-code/introBroadStrokes_hu_34d179521e8f4b0a.png","permalink":"https://www.maiatoday.net/p/intro-to-compose-live-code/","title":"Intro to Compose - Live code"},{"content":"A shorter version of my Magic Sprinkles talk presented at DevFest UK Ireland\nMagic Sprinkles: Adding animations to your app with Jetpack Compose\nI have some Jetpack Compose UI components in my app and now I want to add animations, where do I start? In this presentation I will look briefly at the Jetpack Compose animation api to get an overview of the animation system. Then I will look at a few quick win simple animations that can add some magic to your app. I will dive into more complex and custom animations to see what is possible. All of these experiments will be illustrated in a sample app provided in a companion repo. At the end of this talk you will:\nhave an overview of how animation works in Jetpack Compose have some practical animation examples that you can add to your app immediately have an idea of what is possible with complex and custom animations have a code repo of examples Repo\nSlides\nVideo\n","date":"2022-01-29T12:53:10+02:00","image":"https://www.maiatoday.net/p/magic-sprinkles-at-devfest-uk-ireland/devfestBanner_hu_934ac804a5113d7b.jpg","permalink":"https://www.maiatoday.net/p/magic-sprinkles-at-devfest-uk-ireland/","title":"Magic Sprinkles at DevFest UK Ireland"},{"content":"In my exploration of animation in Jetpack Compose I built a Confetti modifier that could be applied to any composable. I first showed the modifier in my presentation for Chicago Roboto but since I made it something was bothering me. The way that I can get the state in Compose to register change is by making copies of objects or making new objects. For a modifier that uses particles this can be many objects.\nI profiled my original modifier and sure enough I see the object allocation and also the garbage collectore cleaning up when the confetti modifier is visible.\nFast forward to Dec 2021 and my friends over at Code with Italians built a similar snow modifier. Revisiting my modifier, I cleaned it up. I managed to get rid of some of the object allocation. However since it is a particle system and each of the particles change position, it needs some form of state that changes as the position of the particles change. I used the Offset class as this is the object that a Circle needs to draw and the object has been optimised to pack the x and y floats. It also has some other useful functions and operators. Offset is immutable so if the particle changes position a new object is made. It is smaller than my original implementation. It isn\u0026rsquo;t really fair to compare the screenshot below with the one above as the time over which the heap capture ran is is not the same. The shallow size of Offset is 16 and the shallow size of the original Confetto objects is 24 and the point inside the Confetto object also has a shallow size of 16. The improvements eliminated the allocation of the extra Confetto object.\nMy intuition says it is preferable to sprinkle the memory with fewer smaller pieces of confetti rather than many larger ones. Still there isn\u0026rsquo;t really a way around it since Offset is immutable and Compose is built around tracking unidirectional state flow. Mutable State holder classes won\u0026rsquo;t register a change if the object that holds the state doesn\u0026rsquo;t change. This means if I keep an object that holds the position of the particle and I simply change the x and y values in he mutable state holder will not register a change. Here is a detail discussion on mutable state.\nHow to build your own drawing modifier You need a extension function on modifier like so-\nfun Modifier.confetti( // all your parameters to set up the modifier ) = composed { // the composed function gives you a composition on each composable where this modifier is used // remeber any state you need here var confettiState by remember { mutableStateOf( ConfettiState( // parameters to setup the state ) ) } LaunchedEffect(isVisible) { while (isVisible \u0026amp;\u0026amp; isActive) { withFrameMillis { newTick -\u0026gt; // this side effect will return a tick every frame giving // the elapsed time since the previous frame // This would be the place where you move the particles } } } onSizeChanged { // do what you need to do if the size changes }.drawBehind { // this is where you can draw behind what ever composable content. // It proveds a drawScope with a canvas which you can use // e.g. loop through the particles and draw them } } Then it is as simple as adding the modifier to any composable, e.g. here is a black box with red Hello World and confetti behind.\nBox(modifier = Modifier .background(Color.Black) .fillMaxSize() .confetti() ) { Text(\u0026#34;Hello World\u0026#34;, color = Color.Red) } The code for the cleaned up confetti modifier\n","date":"2021-12-31T07:37:42+02:00","image":"https://www.maiatoday.net/p/confetti-cleanup/confetti_doge_hu_d45f8d56036e27e2.png","permalink":"https://www.maiatoday.net/p/confetti-cleanup/","title":"Confetti Cleanup"},{"content":"Introduction to Jetpack Compose technical talk to embeded, mobile and flutter developers. This talk gives an intro to Jetpack Compose and shows how to get started with a simple code lab.\n","date":"2021-11-30T16:36:23+02:00","permalink":"https://www.maiatoday.net/p/intro-to-jetpack-compose/","title":"Intro to Jetpack Compose"},{"content":"Devfest 2021 West Sweden lighting talk about Copy Paste Jetpack Compose. CopyPaste is often the first attempt at re-using code, but it has its pitfalls. Some musing on why it seemed easier to copy and paste snippets of code in a Jetpack Compose project. It seems to relate to the composable architecture. Composables can be transplanted easily and modifiers can be grafted from one Composeable to another.\nSome pitfalls and things to watch out for and some good places to find code snippets.\n","date":"2021-11-14T16:27:39+02:00","image":"https://www.maiatoday.net/p/copy-paste-compose/scissor_hu_831aecd3ca20fee7.png","permalink":"https://www.maiatoday.net/p/copy-paste-compose/","title":"Copy Paste Compose"},{"content":"Panel discussion on Rust and Kotlin for GDG Cape Town\n","date":"2021-10-28T16:21:43+02:00","permalink":"https://www.maiatoday.net/p/rust-vs-kotlin-panel-discussion/","title":"Rust vs Kotlin panel discussion"},{"content":"I presented a talk for Chicago Roboto 2021 and for GDG Cape Town titled Magic Sprinkles: Adding animations to and existing app. Below are the videos of both talks and the slides\nSlides\nChicago Robot video\nGDG Cape Town video\n","date":"2021-09-28T16:10:24+02:00","image":"https://www.maiatoday.net/p/two-talks-magic-sprinkles-adding-animations-to-a-jetpack-compose-app/magic_sprinkles_hu_b290be8042a12b97.png","permalink":"https://www.maiatoday.net/p/two-talks-magic-sprinkles-adding-animations-to-a-jetpack-compose-app/","title":"Two Talks - Magic Sprinkles: adding animations to a Jetpack Compose app"},{"content":"Co presented a talk with Ishmael about CameraX and integration with Jetpack Compose for GDG Cape Town.\n","date":"2021-07-29T15:57:58+02:00","image":"https://www.maiatoday.net/p/compose-meets-camerax/compose_meets_camerax_hu_17c127cc783b7b4d.png","permalink":"https://www.maiatoday.net/p/compose-meets-camerax/","title":"Compose meets CameraX"},{"content":"Another step forward in recreating the icon 90s website look is the hit counter, visitor counter or web counter in classic squemorphic odometer style.\nI was inspired by a recent episode of Code with Italians where they animated a time field. I wanted to change the counter component to animate each number individually to get that odometer look.\nBefore doing this though there was a question of state. I wanted to make a counter that would auto increment in a coroutine. It had to change direction up or down if you tapped it. To do this I decided to store the state and the counting direction in a view model. This allowed me to keep the components as stateless as possible. The components are re-usable because the logic that makes the numbers go up or down is held outside of the composable functions.\nThe recommendation from Google is when you use a view model to hold state, keep it close to the root screen. I made a screen for my visitor counter and added it to my navigation code. Since I already had Hilt enabled in the project it was pretty easy to get hold of the viewmodel. The code snippet in the Navigation looks like this:\nNavHost(navController, startDestination = \u0026#34;overview\u0026#34;) { //... other routes go here composable(route = \u0026#34;counter\u0026#34;) { val viewModel: CounterViewModel = hiltViewModel() //\u0026lt;--- get the viewmodel from Hilt val count by viewModel.counter.collectAsState() //\u0026lt;--- the viewmodel exposes the counter as a StateFlow CounterScreen( count = count, onClick = { viewModel.onClick() } // \u0026lt;--- the viewmodel provides a method for when the element is clicked ) } } The CounterScreen is stateless and gets the value of the counter and the event handler as parameters. The CounterScreen has a Counter composable. The role of the Counter composable is to create a row of individual odometer numbers from the passed values. Also it should intercept a click and call the click handler.\n@Composable fun Counter( onClick: () -\u0026gt; Unit, count: Int, width: Int ) { val displayWidth = maxOf(3, width) Row( modifier = Modifier.clickable( interactionSource = remember { MutableInteractionSource() }, indication = null, onClick = onClick ), ) { for (n in displayWidth - 1 downTo 0) { //\u0026lt;--- this loop builds the row based on the number CounterCell( count = (count.toDouble() / 10.0.pow(n) % 10).toInt(), //\u0026lt;--- split the number in to units, tens, hundreds etc width = 1 //\u0026lt;--- set each cell to only be one digit wide ) } } } The actual animation happens in each CounterCell. It uses AnimatedContent to slide from the top if the new number is more than the previous one and slide from the bottom if the new number is lower than the first.\n@Composable fun CounterCell( count: Int, width: Int ) { val numbersSlidingAnimation: AnimatedContentScope\u0026lt;Int\u0026gt;.() -\u0026gt; ContentTransform = { if (initialState \u0026gt; targetState) { slideInVertically(initialOffsetY = { it }) + fadeIn() with slideOutVertically( targetOffsetY = { -it }) + fadeOut() } else { slideInVertically(initialOffsetY = { -it }) + fadeIn() with slideOutVertically( targetOffsetY = { it }) + fadeOut() } } AnimatedContent( targetState = count, transitionSpec = numbersSlidingAnimation ) { number -\u0026gt; Text(text = number.toString().padStart(width, \u0026#39;0\u0026#39;)) } } You can see what this looks like in the gifs below.\nAll that is left to complete this example is the view model.\nAs you can see from the code by making the composable functions simple and stateless, it is possible to separate the UI requirements from the logic that drives it. This is a useful pattern because it allows the view model to be tested properly. It makes the composables themselves re-usable for different situations. Who knows, you could animate click counts or visitors or changing crypto wallet values all with the same re-usable component.\nFind all the source in this repo\nAlso in this series:\nRainbowText\nBlinkTag\n","date":"2021-07-12T21:44:03+02:00","image":"https://www.maiatoday.net/p/welcome-you-are-visitor-number-12345/visitorCounter_hu_641239e08b4c47ed.png","permalink":"https://www.maiatoday.net/p/welcome-you-are-visitor-number-12345/","title":"Welcome you are visitor number 12345"},{"content":"Another small experiment to explore Jetpack Compose animations. I came to the conclusion that any value that is passed as a parameter could be animated, including anything in the modifier. So I set out to build a \u0026lt;blink\u0026gt; tag.\nMy first attempt creates a composable function that takes the modifier, animates it and passes it back to the content lambda. Like this:\n@Composable fun BlinkTag( modifier: Modifier = Modifier, durationMillis: Int = 500, content: @Composable (modifier: Modifier) -\u0026gt; Unit ) { val infiniteTransition = rememberInfiniteTransition() val alpha: Float by infiniteTransition.animateFloat( initialValue = 1f, targetValue = 0f, animationSpec = infiniteRepeatable( animation = tween(durationMillis = durationMillis), repeatMode = RepeatMode.Reverse ) ) content(modifier = modifier.alpha(alpha)) } When you use it you get a modifier back which you then pass to your content.\nBlinkTag Row { Icon( modifier = it, // \u0026lt;- like so tint = RainbowRed, painter = painterResource(id = R.drawable.ic_android_black_24dp), contentDescription = null // decorative element ) Text( text = \u0026#34;blinky\u0026#34;, color = RainbowRed, modifier = it.padding(8.dp) // \u0026lt;- and here too ) } } The animation for this was a linear tween() between invisible and visible. However anyone who knows the blink tag will realise that it stays on longer than off. It blips off and then comes back on again staying visible for longer.\nTo do this I replaced the tween() with keyframes:\n@Composable fun BlinkTag( modifier: Modifier = Modifier, duration: Int = 500, content: @Composable (modifier: Modifier) -\u0026gt; Unit ) { val infiniteTransition = rememberInfiniteTransition() val alpha: Float by infiniteTransition.animateFloat( initialValue = 1f, targetValue = 0f, animationSpec = infiniteRepeatable( animation = keyframes { durationMillis = duration 1f at (duration*0.8).toInt() // we started at 1 and stay here for 80% of the time 0f at duration // then drop down to 0 in the last 20% of the time }, repeatMode = RepeatMode.Reverse ) ) content(modifier = modifier.alpha(alpha)) } Reading the material theme docs I found out there was another way to share alpha values to a children in the composable tree using a LocalContentAlpha. This mechanims is used for emphasis using alpha and I am pretty sure the intention isn\u0026rsquo;t for this to be used to make layouts blink. I am doing this for science.\n@Composable fun LocalContentBlinkTag( durationMillis: Int = 500, content: @Composable () -\u0026gt; Unit ) { val infiniteTransition = rememberInfiniteTransition() val alpha: Float by infiniteTransition.animateFloat( initialValue = 1f, targetValue = 0f, animationSpec = infiniteRepeatable( animation = tween(durationMillis = durationMillis), repeatMode = RepeatMode.Reverse ) ) CompositionLocalProvider(LocalContentAlpha provides alpha) { content() } } When using this blink tag you no longer need to pass down the modifier since the changing alpha value is available to the children in a CompositionLocal\nUse it like this:\nLocalContentBlinkTag { Row { Icon( painter = painterResource(id = R.drawable.ic_android_black_24dp), contentDescription = null // decorative element ) Text(text = \u0026#34;\u0026lt;blink\u0026gt;\u0026#34;) } } Although I defintely don\u0026rsquo;t support the irresponsible use of the blink tag, no investigation of reproducing retro website animations would be complete without a \u0026lt;blink\u0026gt; I realised again how powerful yet simple the animation system in Jetpack Compose can be. Be warned.\nFind all the source in this repo\nAlso in this series:\nRainbowText\nVisitorCounter\n","date":"2021-07-03T17:27:21+02:00","image":"https://www.maiatoday.net/p/blink-like-its-1999/blinktag_hu_8dcce8952d9e9159.png","permalink":"https://www.maiatoday.net/p/blink-like-its-1999/","title":"\u003cblink\u003e like it's 1999"},{"content":"Do you remember web pages in the nineties? Everything was pulsing, rotating and animating. I am exploring Jetpack Compose animations and I figured if I can reproduce a 90s web page look, I can do anything. Also June is the month of Rainbows. So to kick off this series I am building animating rainbow text.\nFirst I need a rainbow. It needs to be flexible enough for me to be able to swap in any rainbow.\nval RainbowRed = Color(0xFFDA034E) val RainbowOrange = Color(0xFFFF9800) val RainbowYellow = Color(0xFFFFEB3B) val RainbowGreen = Color(0xFF4CAF50) val RainbowBlue = Color(0xFF2196F3) val RainbowIndigo = Color(0xFF3F51B5) val RainbowViolet = Color(0xFF9C27B0) val SkittlesRainbow = listOf( RainbowRed, RainbowOrange, RainbowYellow, RainbowGreen, RainbowBlue, RainbowIndigo, RainbowViolet ) Since web pages in the nineties used Times New Roman and Helvetica, I added a free version of a serif font. I chose Source Serif. I included the ttf files in the project and made a FontFamily and hooked this into the theme.\nval SourceSerif = FontFamily( Font(R.font.source_serif_pro_regular), Font(R.font.source_serif_pro_bold, FontWeight.Bold), Font(R.font.source_serif_pro_light, FontWeight.Light), Font(R.font.source_serif_pro_black, FontWeight.Black), Font(R.font.source_serif_pro_extra_light, FontWeight.ExtraLight), ) val Typography = Typography(defaultFontFamily = SourceSerif) MaterialTheme( colors = colors, typography = Typography, shapes = Shapes, content = content ) Next I made a composable that would colour each letter of a string. This simple composable took as many text parameters in and then split the string colouring each character to the colour of the rainbow in the parameter. The startColor index is used to pick which colour the first letter will be.\n@Composable fun MultiColorText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, rainbow: List\u0026lt;Color\u0026gt; = SkittlesRainbow, startColor: Int = 0, ) { Row(modifier) { var index = startColor for (letter in text) { Text(letter.toString(), color = rainbow.get(index), style = style) index++ if (index == rainbow.size) index = 0 } } } This allowed me to create a second composable which used an infinite transition to animate continouously. I animate the startColor integer and this will recompose the nested MultiColorText composable. The animateValue will change the value of colorIndex over time and will use the Int.VectorConverter to get a value between 0 and the size of the rainbow. In this way it creates an endless loop of changing integer values. The animation spec is a simple tween() which just changes between the initalvalue and the targetValue in alinear way. Different effects can be created by fiddling with the repeatMode or the other parameters in the animationSpec or adjusting the duration in the tween().\n@Composable fun SnappyRainbowText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, rainbow: List\u0026lt;Color\u0026gt; = SkittlesRainbow ) { require(rainbow.size \u0026gt; 0) val infiniteTransition = rememberInfiniteTransition() val colorIndex by infiniteTransition.animateValue( initialValue = 0, targetValue = rainbow.size - 1, typeConverter = Int.VectorConverter, animationSpec = infiniteRepeatable( animation = tween(), repeatMode = RepeatMode.Restart ) ) MultiColorText( text = text, style = style, modifier = modifier, startColor = colorIndex, rainbow = rainbow ) } I made a simple test screen with an edit text field so I could try it out.\nAs you can see the animation is uhm \u0026hellip; snappy. If you can\u0026rsquo;t see it, click on the image.\nIs it possible to change from one colour to the next smoothly and still have all the letters different colours?\nThe first step is to create a composable that will cycle through a rainbow of colours. This is done by creating a keyframes animation. The keyframe points are the colours of the rainbow.\n@Composable fun MultiColorSmoothText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, rainbow: List\u0026lt;Color\u0026gt; = PastelRainbow, startIndex: Int = 0, duration: Int ) { val infiniteTransition = rememberInfiniteTransition() val interval = duration / rainbow.size val color by infiniteTransition.animateColor( initialValue = rainbow[0], targetValue = rainbow.last(), animationSpec = infiniteRepeatable( animation = keyframes { durationMillis = duration delayMillis = startIndex * interval / 2 var i = 0 // set the keyframes from the rainbow with code for (color in rainbow) { // this is the crux of setting the keyframes color at i // at is an infix method in the KeyframesSpec class i += interval } }, repeatMode = RepeatMode.Restart ) ) Text(text = text, color = color, style = style, modifier = modifier) } This composable can be used to loop through colours of the rainbow on a Text composable.\nFinally I built a composable that split the string again and made each letter a MultiColorSmoothText. It uses the startIndex to delay the animation. The effect is that each letter is a different colour.\n@Composable fun SmoothRainbowText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, rainbow: List\u0026lt;Color\u0026gt; = PastelRainbow, startColor: Int = 0, duration: Int = 1200 ) { Row(modifier) { var index = startColor for (letter in text) { MultiColorSmoothText( text = letter.toString(), style = style, rainbow = rainbow, startIndex = index, duration = duration ) index++ if (index == rainbow.size) index = 0 } } } And the final smooth animating rainbow text using a pastel rainbow.\nNext I\u0026rsquo;ll tackle some more retro 90s web page inspired animations, visitor counters, flames, rotating images, shifting tiled backgrounds and walls of text that change size.\nUntil then\u0026hellip; this ain\u0026rsquo;t not disco\nFind all the source in this repo\nAlso in this series:\nBlinkTag\nVisitorCounter\n","date":"2021-06-27T00:13:10+02:00","image":"https://www.maiatoday.net/p/animating-rainbow-text/noDisco_hu_7f0d8197210033fc.png","permalink":"https://www.maiatoday.net/p/animating-rainbow-text/","title":"Animating Rainbow Text"},{"content":"I am exploring animations with small sampler functions using Jetpack Compose. This one is a custom component that draws a little pie chart. It will animate a random pie value on the click of the button.\ndata class PieData( val foreground: Color = Color.White, val strokeWidth: Dp = 4.dp, val percentage: Float ) @Composable fun PieStatus( modifier: Modifier = Modifier, pieData: PieData ) { var animationPlayed by remember { mutableStateOf(false) } val currentPercentage = animateFloatAsState( targetValue = if (animationPlayed) pieData.percentage else 0f, animationSpec = tween(1000) ) LaunchedEffect(key1 = true) { animationPlayed = true } Canvas( modifier = modifier ) { val canvasWidth = size.width val canvasHeight = size.height drawCircle( color = pieData.foreground, center = Offset(x = canvasWidth / 2, y = canvasHeight / 2), radius = canvasWidth / 2 - pieData.strokeWidth.toPx(), style = Stroke(width = pieData.strokeWidth.toPx()) ) val arcPadding = pieData.strokeWidth.toPx() * 2 drawArc( color = pieData.foreground, startAngle = -90f, sweepAngle = currentPercentage.value * 360, useCenter = true, topLeft = Offset(arcPadding, arcPadding), size = Size(size.width - (arcPadding * 2f), size.height - (arcPadding * 2f)) ) } } code\n","date":"2021-06-16T21:36:11Z","image":"https://www.maiatoday.net/p/random-animating-pie-button/randomPieBanner_hu_33980bf741933155.png","permalink":"https://www.maiatoday.net/p/random-animating-pie-button/","title":"Random Animating Pie Button"},{"content":"Panel discussion with GDG Johannesburg and She Can Do\n","date":"2021-06-02T15:51:17+02:00","permalink":"https://www.maiatoday.net/p/she-can-do-panel-discussion-collaboration-between-designers-and-developers/","title":"She Can Do Panel discussion: Collaboration between designers and developers"},{"content":"Getting started with Jetpack compose Codelab and talk for International Women\u0026rsquo;s Day event with Women Techmakers and GDGs in Southern Africa\n","date":"2021-03-27T15:44:02+02:00","image":"https://www.maiatoday.net/p/international-womens-day-codelab-getting-started-with-compose/iwd_compose_hu_d83bd7affa876a5f.png","permalink":"https://www.maiatoday.net/p/international-womens-day-codelab-getting-started-with-compose/","title":"International Womens Day Codelab - Getting started with Compose"},{"content":"Co presented with Charles Okot an first look at Jetpack and how we could use it.\n","date":"2021-03-04T15:36:17+02:00","image":"https://www.maiatoday.net/p/jetpack-compose-as-good-as-the-hype/compose_hype_hu_c88cee8bf4b1304d.png","permalink":"https://www.maiatoday.net/p/jetpack-compose-as-good-as-the-hype/","title":"Jetpack Compose - As good as the hype?"},{"content":"Co presenting a talk at Droidcon EMEA 2020\nvideo\nslides\n","date":"2020-10-09T15:19:42+02:00","image":"https://www.maiatoday.net/p/refresh-renew-refactor-modernising-a-large-android-app-with-many-users/droidcon2020_hu_1081b7cf4cb6fbd7.png","permalink":"https://www.maiatoday.net/p/refresh-renew-refactor-modernising-a-large-android-app-with-many-users/","title":"Refresh, Renew, Refactor - modernising a large Android app with many users"},{"content":"Talk presented for GDG Johannesburg comparing dependency injection technologies.\nslides\n","date":"2020-08-05T15:02:01+02:00","image":"https://www.maiatoday.net/p/dagger-hilt-koin-a-comparison/dagger_hilt_koin_hu_bee31593c8d65850.png","permalink":"https://www.maiatoday.net/p/dagger-hilt-koin-a-comparison/","title":"Dagger, Hilt, Koin - a comparison"},{"content":"How to test kotlin coroutines by injecting dispatchers and using the testing apis. No one wants flakey tests and I want a time machine.\n","date":"2019-12-08T06:47:30+02:00","image":"https://www.maiatoday.net/p/testing-kotlin-coroutines/timeMachine_hu_1e1ecab2a95b79b3.png","permalink":"https://www.maiatoday.net/p/testing-kotlin-coroutines/","title":"Testing Kotlin Coroutines"},{"content":"A sampler app to explore Coroutine testing. This is a toy app that simulates an 8 Ball. It can answer questions, find synonmyms, generate a password or check if a number is prime. It was created to make a situation where it makes sense to use coroutines to e.g. go on the network or make a calculation. Then I added tests for all the pieces using kotlinx-coroutine-test.\nAs a bonus the repo is set up to run the tests on CircleCi. It has detekt setup and jacoco code coverage. There is also a branch where all the tests are converted to junit5.\nDevfest 2019 video\nThis is the companion repo to the KotlinEveryWhereZA 2019 and DevFestZa 2019 talk. Slides are in the repo.\ncode\n","date":"2019-11-23T21:36:11Z","image":"https://www.maiatoday.net/p/hello8ball/Screenshot_1566145786_hu_8ccdbe824992b2b4.png","permalink":"https://www.maiatoday.net/p/hello8ball/","title":"Hello8Ball"},{"content":"Pre pandemic Offerzen hosted a live panel on the future of work. Some thoughts on freelancing and remote work. All this has changed now, if only we knew\u0026hellip;\n","date":"2019-04-03T06:56:27+02:00","image":"https://www.maiatoday.net/p/future-of-work-panel/futureOfWork2019_hu_c4218eb963b86479.png","permalink":"https://www.maiatoday.net/p/future-of-work-panel/","title":"Future of Work Panel"},{"content":"Exploring railroad error handling in Kotlin. Pure Kotlin.\ncode\n","date":"2019-02-08T21:36:13Z","image":"https://www.maiatoday.net/p/hellotrain/errorTrain_hu_9d93faf2604bb8d2.png","permalink":"https://www.maiatoday.net/p/hellotrain/","title":"HelloTrain"},{"content":"I have found myself adding jacoco and coverage limits to more than one Android project. Enough times for me to extract the gradle bits in to a little nugget of grooviness to just drop into a project as needed. For a while now I have been reading about test coverage numbers and working with my intuition about what is the most valuable thing for me to spend my time on when building something. Also Kotlin. In the light of this my gradle build file snippet contains the following:\nJacoco for test coverage Kotlin support A way to choose important classes and only set coverage limits on those Do this,\nPut the gist in a file jacoco.gradle\nModify the jacoco.gradle file to add limits for your important packages.\nAdd this line to your build.gradle\napply from: 'jacoco.gradle'\nAnd then run the command ./gradlew tasks\nto see what new tasks are there to run. e.g. in the reporting section find something similar to\n./gradlew/testDevDebugUnitTestCoverageVerification\nwhich will run the tests, make coverage reports and apply limits.\nFind the reports in a path similar to this ~/your\\_project/your\\_module/build/reports/jacoco/testDevDebugUnitTestCoverage/html/index.html\nWithout further ado, the gist:\nThe code in the gist was taken from so many blogposts. I can’t even remember them all. Thanks to the original authors.\nAlso note there is a small piece of cargo cult code that kept sneaking in from sundry blogposts that I don’t need because I don’t have Robolectric tests. As it turns out this code crashes unit tests on Java \u0026gt; 8. So remove this code if you have it and if it fits your usecase.\ntasks.withType(Test) { jacoco.includeNoLocationClasses = true } ","date":"2018-10-13T13:55:25Z","image":"https://www.maiatoday.net/p/note-to-future-me-add-jacoco-and-coverage-limits/blocks_hu_c0ec47fb066866ec.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-add-jacoco-and-coverage-limits/","title":"Note to Future me — add jacoco and coverage limits"},{"content":"Adding the library to the app see commit 03bd7a7534f7a23276fc47c4f7c94d7ac153bc0b\nplugin dependencies Making a service\nwrapping and existing endpoint https://github.com/joakin/wikimedia-graphql install node if you don’t have it. node — version running the service `node index.js` play with the service https://gist.github.com/maiatoday/578aebcee3bd9decb6e3c6833c73a4ba#file-wikipage-graphql\ngetting the json.schema https://github.com/apollographql/apollo-codegen cd app/src/main/graphql/net/maiatoday/helloblondie apollo-codegen download-schema http://localhost:3002/graphql — output schema.json Adding the service to the app\nadding a query adding the schema a5a47f0ff45f6bc5d5a3aa6f1fee50af363f7893 getting access to the service calling the service Some pointers on query syntax\nGitrepo\n`sudo apollo-codegen introspect-schema https://api.blargh.com/graphql — header “Authorization: Bearer xxxx” — output schema.json`\n","date":"2018-04-08T21:36:13Z","image":"https://www.maiatoday.net/p/note-to-future-me-adding-graphql-to-an-app/helloBlondie_hu_ee8c53b57b7b0e8c.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-adding-graphql-to-an-app/","title":"Note to future me — Adding GraphQL to an app"},{"content":"I want to make my little experiments public and save them as a reminder for future me. So here is yet another post on Matchers and Espresso testing.\nI want to test this:\nFirst activity starts another activity at a button click.\nFirst activity passes a parcelable object to the second activity.\nTest that the intent that starts the second activity contains the object with the correct properties.\nI built a contrived example, MainActivity collects some info and passes this to StarActivity in a parcelable called ContrivedParams. See the sample code on GitHub.\nTo write the tests I brushed up on Hamcrest[1][2][3]: a library that makes it easier to write readable tests. Instead of\nassert(expected==actual) you can write almost-english\nassertThat(actual, is(expected)) which is a sugar coated version of\nassertThat(actual is(equalto(expected))) Sadly though is is a hard keyword in Kotlin so I ended up using the isA() and equalTo() varieties of calls rather than escaping is with backticks.\nAnother reason to use Hamcrest — better error messages. Compare these two messages.\njava.lang.AssertionError at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:37) with the message given by a custom matcher\njava.lang.AssertionError: Expected: title should return “Hello World” but: was “Hello World!” at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:42) or the error message given by an object matcher\njava.lang.AssertionError: Expected: \u0026lt;ContrivedParams(title=Hello World, starCount=3, colour=#00b0ff)\u0026gt; but: was \u0026lt;ContrivedParams(title=Hello World!, starCount=4, colour=#00b0fff)\u0026gt; at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:47) The parameters for the second activity is passed in a parcelable data class.\nI used the Espresso-intents library . Start the activity with an IntentsTestRule. The IntentsTestRule initialises the Espresso intents before each test and releases them again after the test completes. I used the intended method to test the intent and the hasEntry method to check for the extra. I compared the extra with an expected object. As a bonus I wrote a custom matcher to check the properties of the object that was in the intent. Custom matchers are useful if you do not need to check all of the properties in the data object.\nThe intent test:\nOne of the custom matchers:\nAll green\n","date":"2018-01-26T14:54:45.273Z","image":"https://www.maiatoday.net/p/note-to-future-me-testing-intents-with-matchers/testResults_hu_112eebd64e7f6d20.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-testing-intents-with-matchers/","title":"Note to Future Me — Testing Intents with Matchers"},{"content":"Curious Keystore experiments. A small simple project that saves something in the keystore and gets it out again. Tricksiness happens across versions of Android.\ncode\n","date":"2017-11-12T21:36:13Z","image":"https://www.maiatoday.net/p/hellokeystore/keystore_hu_17782dd050dc702d.png","permalink":"https://www.maiatoday.net/p/hellokeystore/","title":"HelloKeystore"},{"content":"I like to make sampler apps to explore new things to learn. I was wondering how the google location apis differed from the new awereness apis. The Geotaur repo has an app that can use either of these two interfaces. Since it builds two flavours you can run the apps side by side with the same geofences to see how they differ. While I was at it I tried my hand at some other tech too, firebase remote logging and db access, dependency injection.\nInstall from play:\nNeotaur{:target=\u0026quot;_blank\u0026quot;} Geotaur{:target=\u0026quot;_blank\u0026quot;} ","date":"2016-08-29T14:04:46+02:00","image":"https://www.maiatoday.net/p/neotaur-geotaur/neotaur_hu_57769a4e0efe32d4.png","permalink":"https://www.maiatoday.net/p/neotaur-geotaur/","title":"Neotaur-Geotaur"},{"content":"An android app to explore how apps can modify images and detect faces. The code is here.\n","date":"2014-10-09T21:36:13Z","image":"https://www.maiatoday.net/p/autoselfie-2013/feature_hu_43b1e2a9fea983ce.png","permalink":"https://www.maiatoday.net/p/autoselfie-2013/","title":"autoselfie 2013"},{"content":"In 2013 I made a variation of an older kinect piece called seedSpark. There were some improvements in the code which now used Frame buffers.\n","date":"2014-10-09T21:26:46Z","image":"https://www.maiatoday.net/p/seed-spark-2013/snapshot_000_hu_8c4c9844343c066e.png","permalink":"https://www.maiatoday.net/p/seed-spark-2013/","title":"seed spark 2013"},{"content":"In 2012 I made my Masters exhibition using openframeworks and the Kinect. It consisted of 4 interactive works which explored concepts around human ideas and machine execution. The repo veloPeople contains all four works each in their own branch. Each work was built on a custom ubuntu live disk. So the installation works existed on flash disk. Given the right hardware you could boot from the flash disk and run one of the works.\n","date":"2014-10-09T20:54:30Z","image":"https://www.maiatoday.net/p/masters-2012/IMG_8522_hu_80281949714fed3b.JPG","permalink":"https://www.maiatoday.net/p/masters-2012/","title":"Masters 2012"}]