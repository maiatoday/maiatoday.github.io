[{"content":"Wow my first in real life conference in two years with DevConf 2022 Presenting on Jetpack Compose and how it interoperates with an existing opensource Android app.\nFind the slides here\n ","date":"2022-04-07T16:26:46+02:00","image":"https://www.maiatoday.net/p/something-old-something-new-adding-jetpack-compose-to-habitica/oldNew_hu7d359d36efdc00f8063aad7d2d857b6c_275565_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/something-old-something-new-adding-jetpack-compose-to-habitica/","title":"Something old, something new - Adding Jetpack Compose to Habitica"},{"content":"To practise for live speaking and to explore how to add Jetpack Compose to an existing open source app, I start a twitch stream as kibethcodes. The app I chose to work on is Habitica, a habit tracking/ToDo app that saw it\u0026rsquo;s first commit in 2015.\nStreaming Tuesdays at 19:00 UTC+2\nHere are a selection of highlights of the twitch stream.\n      ","date":"2022-03-02T21:38:36+02:00","image":"https://www.maiatoday.net/p/kibeth-codes-twitch-highlights-1/blank_hu4eac7272e630503bfd5d612e6fda8570_39255_120x120_fill_q75_box_smart1.jpeg","permalink":"https://www.maiatoday.net/p/kibeth-codes-twitch-highlights-1/","title":"Kibeth Codes twitch highlights 1"},{"content":"At the moment people often ask me where to go start learning Jetpack Compose. Here is a a hand picked selection of my favourite Compose resources. These may change as I find new ones. There should be something for everyone, Official, Community, Videos, Books, Streams.\nOfficial docs Official Docs\nPathway\nOfficial apps Jetpack Compose Samples\nMaterial Catalog\nCommunity websites Jetpackcompose.app\ncompose.academy\nJetpack Compose Playground\nVideos Philip Lackner Compose playist\nCoding in Flow\nBooks Android UI Development with Jetpack Compose - Thomas KÃ¼nneth\nPractical Jetpack Compose - Joe Birch\nCompose Internals - Jorge Castillo\nTwitch Coding with the Italians\nKibeth Codes\nAdam McNeilly\nFlorian Walther\nSpecialised areas Modifiers how it works\nState Animation ","date":"2022-02-28T21:43:48+02:00","image":"https://www.maiatoday.net/p/links-to-learn-compose/resources_hud41cba59c8a8d0529b9efbaefb49020d_1475149_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/links-to-learn-compose/","title":"Links to Learn Compose"},{"content":"A lighting talk for Jozi-JUG demonstrating Compose animation and demo on mobile and desktop.\n  slides\n","date":"2022-02-28T21:13:06+02:00","image":"https://www.maiatoday.net/p/lightning-demo-of-compose-animation/introBunny_hub1f64d8e3b6378d69edfc10093d82550_992102_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/lightning-demo-of-compose-animation/","title":"Lightning Demo of Compose animation"},{"content":"Panel discussion hosted by GDG Cape Town. Interesting discussion at the end of the presentations by Nick and Thomas. Some topics that we discussed was ideas round structuring existing apps and where to put the compose parts, integrating with an existing theme and discussions about Thomas\u0026rsquo;s book.\n  ","date":"2022-02-24T20:34:09+02:00","image":"https://www.maiatoday.net/p/panel-talk-on-deep-dive-into-compose/bannerPanel_hu177d08be8a3e31aa5e79b54574ec553d_261250_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/panel-talk-on-deep-dive-into-compose/","title":"Panel talk on Deep dive into compose"},{"content":"A evening of comparing animation in declarative frameworks. A speedrun of the animation system in Jetpack Compose as a comparison agains SwiftUI and Flutter. Hosted by GDG Nuremberg We discovered many similarites, all the systems have some way to control the animation graph, with somewhat confusing differences in naming. A tween in compose is not the same as a tween in Flutter. Flutter Tween is an animationSpec in Compose. Compose tween is a specific kind of Curve in Flutter that does a linear interpolation. Oh and its a function in Compose and an object in Flutter.\n  Slides\n","date":"2022-02-22T20:41:06+02:00","image":"https://www.maiatoday.net/p/comparing-declarative-animation-frameworks/animateCompare_hu04bd3c965107f8312c91a48f04a0d8cc_361068_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/comparing-declarative-animation-frameworks/","title":"Comparing Declarative Animation frameworks"},{"content":"A broad strokes intro to Jetpack Compose followed by a live code demo taster of what it is like to use this framework. The demo ranges from basic use, a bit of Material components and one small animation. Hosted by DevUG. In the second part of the event, Thomas gives us a summary of what\u0026rsquo;s new in Jetpack Compose 1.1\n  Slides\n","date":"2022-02-16T20:51:01+02:00","image":"https://www.maiatoday.net/p/intro-to-compose-live-code/introBroadStrokes_hu8d351561774fc3f3dda49a58193a510c_807405_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/intro-to-compose-live-code/","title":"Intro to Compose - Live code"},{"content":"A shorter version of my Magic Sprinkles talk presented at DevFest UK Ireland\nMagic Sprinkles: Adding animations to your app with Jetpack Compose\nI have some Jetpack Compose UI components in my app and now I want to add animations, where do I start? In this presentation I will look briefly at the Jetpack Compose animation api to get an overview of the animation system. Then I will look at a few quick win simple animations that can add some magic to your app. I will dive into more complex and custom animations to see what is possible. All of these experiments will be illustrated in a sample app provided in a companion repo. At the end of this talk you will:\n have an overview of how animation works in Jetpack Compose have some practical animation examples that you can add to your app immediately have an idea of what is possible with complex and custom animations have a code repo of examples  Repo\nSlides\nVideo\n","date":"2022-01-29T12:53:10+02:00","image":"https://www.maiatoday.net/p/magic-sprinkles-at-devfest-uk-ireland/devfestBanner_hu6e52b5b9ee35a3fda495ca211fb6831c_206430_120x120_fill_q75_box_smart1.jpg","permalink":"https://www.maiatoday.net/p/magic-sprinkles-at-devfest-uk-ireland/","title":"Magic Sprinkles at DevFest UK Ireland"},{"content":"In my exploration of animation in Jetpack Compose I built a Confetti modifier that could be applied to any composable. I first showed the modifier in my presentation for Chicago Roboto but since I made it something was bothering me. The way that I can get the state in Compose to register change is by making copies of objects or making new objects. For a modifier that uses particles this can be many objects.\nI profiled my original modifier and sure enough I see the object allocation and also the garbage collectore cleaning up when the confetti modifier is visible.\nFast forward to Dec 2021 and my friends over at Code with Italians built a similar snow modifier. Revisiting my modifier, I cleaned it up. I managed to get rid of some of the object allocation. However since it is a particle system and each of the particles change position, it needs some form of state that changes as the position of the particles change. I used the Offset class as this is the object that a Circle needs to draw and the object has been optimised to pack the x and y floats. It also has some other useful functions and operators. Offset is immutable so if the particle changes position a new object is made. It is smaller than my original implementation. It isn\u0026rsquo;t really fair to compare the screenshot below with the one above as the time over which the heap capture ran is is not the same. The shallow size of Offset is 16 and the shallow size of the original Confetto objects is 24 and the point inside the Confetto object also has a shallow size of 16. The improvements eliminated the allocation of the extra Confetto object.\nMy intuition says it is preferable to sprinkle the memory with fewer smaller pieces of confetti rather than many larger ones. Still there isn\u0026rsquo;t really a way around it since Offset is immutable and Compose is built around tracking unidirectional state flow. Mutable State holder classes won\u0026rsquo;t register a change if the object that holds the state doesn\u0026rsquo;t change. This means if I keep an object that holds the position of the particle and I simply change the x and y values in he mutable state holder will not register a change. Here is a detail discussion on mutable state.\nHow to build your own drawing modifier You need a extension function on modifier like so-\nfun Modifier.confetti( // all your parameters to set up the modifier ) = composed { // the composed function gives you a composition on each composable where this modifier is used  // remeber any state you need here  var confettiState by remember { mutableStateOf( ConfettiState( // parameters to setup the state  ) ) } LaunchedEffect(isVisible) { while (isVisible \u0026amp;\u0026amp; isActive) { withFrameMillis { newTick -\u0026gt; // this side effect will return a tick every frame giving  // the elapsed time since the previous frame  // This would be the place where you move the particles  } } } onSizeChanged { // do what you need to do if the size changes  }.drawBehind { // this is where you can draw behind what ever composable content.  // It proveds a drawScope with a canvas which you can use  // e.g. loop through the particles and draw them  } } Then it is as simple as adding the modifier to any composable, e.g. here is a black box with red Hello World and confetti behind.\nBox(modifier = Modifier .background(Color.Black) .fillMaxSize() .confetti() ) { Text(\u0026#34;Hello World\u0026#34;, color = Color.Red) } The code for the cleaned up confetti modifier\n","date":"2021-12-31T07:37:42+02:00","image":"https://www.maiatoday.net/p/confetti-cleanup/confetti_doge_hua96701f229dcdbb6d8818d2e1e5ed2c2_156508_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/confetti-cleanup/","title":"Confetti Cleanup"},{"content":"Introduction to Jetpack Compose technical talk to embeded, mobile and flutter developers. This talk gives an intro to Jetpack Compose and shows how to get started with a simple code lab.\n  ","date":"2021-11-30T16:36:23+02:00","permalink":"https://www.maiatoday.net/p/intro-to-jetpack-compose/","title":"Intro to Jetpack Compose"},{"content":"Devfest 2021 West Sweden lighting talk about Copy Paste Jetpack Compose. CopyPaste is often the first attempt at re-using code, but it has its pitfalls. Some musing on why it seemed easier to copy and paste snippets of code in a Jetpack Compose project. It seems to relate to the composable architecture. Composables can be transplanted easily and modifiers can be grafted from one Composeable to another.\nSome pitfalls and things to watch out for and some good places to find code snippets.\n  ","date":"2021-11-14T16:27:39+02:00","image":"https://www.maiatoday.net/p/copy-paste-compose/scissor_hu0a6323e13a8811860553d20d6a4eea58_199880_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/copy-paste-compose/","title":"Copy Paste Compose"},{"content":"Panel discussion on Rust and Kotlin for GDG Cape Town\n  ","date":"2021-10-28T16:21:43+02:00","permalink":"https://www.maiatoday.net/p/rust-vs-kotlin-panel-discussion/","title":"Rust vs Kotlin panel discussion"},{"content":"I presented a talk for Chicago Roboto 2021 and for GDG Cape Town titled Magic Sprinkles: Adding animations to and existing app. Below are the videos of both talks and the slides\nSlides\nChicago Robot video\nGDG Cape Town video\n  ","date":"2021-09-28T16:10:24+02:00","image":"https://www.maiatoday.net/p/two-talks-magic-sprinkles-adding-animations-to-a-jetpack-compose-app/magic_sprinkles_hua6bad4e184346675f1339b552e34a6bb_338861_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/two-talks-magic-sprinkles-adding-animations-to-a-jetpack-compose-app/","title":"Two Talks - Magic Sprinkles: adding animations to a Jetpack Compose app"},{"content":"Co presented a talk with Ishmael about CameraX and integration with Jetpack Compose for GDG Cape Town.\n  ","date":"2021-07-29T15:57:58+02:00","image":"https://www.maiatoday.net/p/compose-meets-camerax/compose_meets_camerax_hu8fe8e995bfd404224e728ce64961382f_1005013_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/compose-meets-camerax/","title":"Compose meets CameraX"},{"content":"Another step forward in recreating the icon 90s website look is the hit counter, visitor counter or web counter in classic squemorphic odometer style.\nI was inspired by a recent episode of Code with Italians where they animated a time field. I wanted to change the counter component to animate each number individually to get that odometer look.\nBefore doing this though there was a question of state. I wanted to make a counter that would auto increment in a coroutine. It had to change direction up or down if you tapped it. To do this I decided to store the state and the counting direction in a view model. This allowed me to keep the components as stateless as possible. The components are re-usable because the logic that makes the numbers go up or down is held outside of the composable functions.\nThe recommendation from Google is when you use a view model to hold state, keep it close to the root screen. I made a screen for my visitor counter and added it to my navigation code. Since I already had Hilt enabled in the project it was pretty easy to get hold of the viewmodel. The code snippet in the Navigation looks like this:\nNavHost(navController, startDestination = \u0026#34;overview\u0026#34;) { //... other routes go here  composable(route = \u0026#34;counter\u0026#34;) { val viewModel: CounterViewModel = hiltViewModel() //\u0026lt;--- get the viewmodel from Hilt  val count by viewModel.counter.collectAsState() //\u0026lt;--- the viewmodel exposes the counter as a StateFlow  CounterScreen( count = count, onClick = { viewModel.onClick() } // \u0026lt;--- the viewmodel provides a method for when the element is clicked  ) } } The CounterScreen is stateless and gets the value of the counter and the event handler as parameters. The CounterScreen has a Counter composable. The role of the Counter composable is to create a row of individual odometer numbers from the passed values. Also it should intercept a click and call the click handler.\n@Composable fun Counter( onClick: () -\u0026gt; Unit, count: Int, width: Int ) { val displayWidth = maxOf(3, width) Row( modifier = Modifier.clickable( interactionSource = remember { MutableInteractionSource() }, indication = null, onClick = onClick ), ) { for (n in displayWidth - 1 downTo 0) { //\u0026lt;--- this loop builds the row based on the number  CounterCell( count = (count.toDouble() / 10.0.pow(n) % 10).toInt(), //\u0026lt;--- split the number in to units, tens, hundreds etc  width = 1 //\u0026lt;--- set each cell to only be one digit wide  ) } } } The actual animation happens in each CounterCell. It uses AnimatedContent to slide from the top if the new number is more than the previous one and slide from the bottom if the new number is lower than the first.\n@Composable fun CounterCell( count: Int, width: Int ) { val numbersSlidingAnimation: AnimatedContentScope\u0026lt;Int\u0026gt;.() -\u0026gt; ContentTransform = { if (initialState \u0026gt; targetState) { slideInVertically(initialOffsetY = { it }) + fadeIn() with slideOutVertically( targetOffsetY = { -it }) + fadeOut() } else { slideInVertically(initialOffsetY = { -it }) + fadeIn() with slideOutVertically( targetOffsetY = { it }) + fadeOut() } } AnimatedContent( targetState = count, transitionSpec = numbersSlidingAnimation ) { number -\u0026gt; Text(text = number.toString().padStart(width, \u0026#39;0\u0026#39;)) } } You can see what this looks like in the gifs below.\nAll that is left to complete this example is the view model.\nAs you can see from the code by making the composable functions simple and stateless, it is possible to separate the UI requirements from the logic that drives it. This is a useful pattern because it allows the view model to be tested properly. It makes the composables themselves re-usable for different situations. Who knows, you could animate click counts or visitors or changing crypto wallet values all with the same re-usable component.\nFind all the source in this repo\nAlso in this series:\nRainbowText\nBlinkTag\n","date":"2021-07-12T21:44:03+02:00","image":"https://www.maiatoday.net/p/welcome-you-are-visitor-number-12345/visitorCounter_hu9d445d78dd9da3a596374f2fa2fb4085_20893_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/welcome-you-are-visitor-number-12345/","title":"Welcome you are visitor number 12345"},{"content":"Another small experiment to explore Jetpack Compose animations. I came to the conclusion that any value that is passed as a parameter could be animated, including anything in the modifier. So I set out to build a \u0026lt;blink\u0026gt; tag.\nMy first attempt creates a composable function that takes the modifier, animates it and passes it back to the content lambda. Like this:\n@Composable fun BlinkTag( modifier: Modifier = Modifier, durationMillis: Int = 500, content: @Composable (modifier: Modifier) -\u0026gt; Unit ) { val infiniteTransition = rememberInfiniteTransition() val alpha: Float by infiniteTransition.animateFloat( initialValue = 1f, targetValue = 0f, animationSpec = infiniteRepeatable( animation = tween(durationMillis = durationMillis), repeatMode = RepeatMode.Reverse ) ) content(modifier = modifier.alpha(alpha)) } When you use it you get a modifier back which you then pass to your content.\nBlinkTag Row { Icon( modifier = it, // \u0026lt;- like so  tint = RainbowRed, painter = painterResource(id = R.drawable.ic_android_black_24dp), contentDescription = null // decorative element  ) Text( text = \u0026#34;blinky\u0026#34;, color = RainbowRed, modifier = it.padding(8.dp) // \u0026lt;- and here too  ) } } The animation for this was a linear tween() between invisible and visible. However anyone who knows the blink tag will realise that it stays on longer than off. It blips off and then comes back on again staying visible for longer.\nTo do this I replaced the tween() with keyframes:\n@Composable fun BlinkTag( modifier: Modifier = Modifier, duration: Int = 500, content: @Composable (modifier: Modifier) -\u0026gt; Unit ) { val infiniteTransition = rememberInfiniteTransition() val alpha: Float by infiniteTransition.animateFloat( initialValue = 1f, targetValue = 0f, animationSpec = infiniteRepeatable( animation = keyframes { durationMillis = duration 1f at (duration*0.8).toInt() // we started at 1 and stay here for 80% of the time  0f at duration // then drop down to 0 in the last 20% of the time  }, repeatMode = RepeatMode.Reverse ) ) content(modifier = modifier.alpha(alpha)) } Reading the material theme docs I found out there was another way to share alpha values to a children in the composable tree using a LocalContentAlpha. This mechanims is used for emphasis using alpha and I am pretty sure the intention isn\u0026rsquo;t for this to be used to make layouts blink. I am doing this for science.\n@Composable fun LocalContentBlinkTag( durationMillis: Int = 500, content: @Composable () -\u0026gt; Unit ) { val infiniteTransition = rememberInfiniteTransition() val alpha: Float by infiniteTransition.animateFloat( initialValue = 1f, targetValue = 0f, animationSpec = infiniteRepeatable( animation = tween(durationMillis = durationMillis), repeatMode = RepeatMode.Reverse ) ) CompositionLocalProvider(LocalContentAlpha provides alpha) { content() } } When using this blink tag you no longer need to pass down the modifier since the changing alpha value is available to the children in a CompositionLocal\nUse it like this:\nLocalContentBlinkTag { Row { Icon( painter = painterResource(id = R.drawable.ic_android_black_24dp), contentDescription = null // decorative element  ) Text(text = \u0026#34;\u0026lt;blink\u0026gt;\u0026#34;) } } Although I defintely don\u0026rsquo;t support the irresponsible use of the blink tag, no investigation of reproducing retro website animations would be complete without a \u0026lt;blink\u0026gt; I realised again how powerful yet simple the animation system in Jetpack Compose can be. Be warned.\nFind all the source in this repo\nAlso in this series:\nRainbowText\nVisitorCounter\n","date":"2021-07-03T17:27:21+02:00","image":"https://www.maiatoday.net/p/blink-like-its-1999/blinktag_hu911b4b0ed820cc14ee3b4798ba6cf98f_12657_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/blink-like-its-1999/","title":"\u003cblink\u003e like it's 1999"},{"content":"Do you remember web pages in the nineties? Everything was pulsing, rotating and animating. I am exploring Jetpack Compose animations and I figured if I can reproduce a 90s web page look, I can do anything. Also June is the month of Rainbows. So to kick off this series I am building animating rainbow text.\nFirst I need a rainbow. It needs to be flexible enough for me to be able to swap in any rainbow.\nval RainbowRed = Color(0xFFDA034E) val RainbowOrange = Color(0xFFFF9800) val RainbowYellow = Color(0xFFFFEB3B) val RainbowGreen = Color(0xFF4CAF50) val RainbowBlue = Color(0xFF2196F3) val RainbowIndigo = Color(0xFF3F51B5) val RainbowViolet = Color(0xFF9C27B0) val SkittlesRainbow = listOf( RainbowRed, RainbowOrange, RainbowYellow, RainbowGreen, RainbowBlue, RainbowIndigo, RainbowViolet ) Since web pages in the nineties used Times New Roman and Helvetica, I added a free version of a serif font. I chose Source Serif. I included the ttf files in the project and made a FontFamily and hooked this into the theme.\nval SourceSerif = FontFamily( Font(R.font.source_serif_pro_regular), Font(R.font.source_serif_pro_bold, FontWeight.Bold), Font(R.font.source_serif_pro_light, FontWeight.Light), Font(R.font.source_serif_pro_black, FontWeight.Black), Font(R.font.source_serif_pro_extra_light, FontWeight.ExtraLight), ) val Typography = Typography(defaultFontFamily = SourceSerif) MaterialTheme( colors = colors, typography = Typography, shapes = Shapes, content = content ) Next I made a composable that would colour each letter of a string. This simple composable took as many text parameters in and then split the string colouring each character to the colour of the rainbow in the parameter. The startColor index is used to pick which colour the first letter will be.\n@Composable fun MultiColorText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, rainbow: List\u0026lt;Color\u0026gt; = SkittlesRainbow, startColor: Int = 0, ) { Row(modifier) { var index = startColor for (letter in text) { Text(letter.toString(), color = rainbow.get(index), style = style) index++ if (index == rainbow.size) index = 0 } } } This allowed me to create a second composable which used an infinite transition to animate continouously. I animate the startColor integer and this will recompose the nested MultiColorText composable. The animateValue will change the value of colorIndex over time and will use the Int.VectorConverter to get a value between 0 and the size of the rainbow. In this way it creates an endless loop of changing integer values. The animation spec is a simple tween() which just changes between the initalvalue and the targetValue in alinear way. Different effects can be created by fiddling with the repeatMode or the other parameters in the animationSpec or adjusting the duration in the tween().\n@Composable fun SnappyRainbowText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, rainbow: List\u0026lt;Color\u0026gt; = SkittlesRainbow ) { require(rainbow.size \u0026gt; 0) val infiniteTransition = rememberInfiniteTransition() val colorIndex by infiniteTransition.animateValue( initialValue = 0, targetValue = rainbow.size - 1, typeConverter = Int.VectorConverter, animationSpec = infiniteRepeatable( animation = tween(), repeatMode = RepeatMode.Restart ) ) MultiColorText( text = text, style = style, modifier = modifier, startColor = colorIndex, rainbow = rainbow ) } I made a simple test screen with an edit text field so I could try it out.\nAs you can see the animation is uhm \u0026hellip; snappy. If you can\u0026rsquo;t see it, click on the image.\nIs it possible to change from one colour to the next smoothly and still have all the letters different colours?\nThe first step is to create a composable that will cycle through a rainbow of colours. This is done by creating a keyframes animation. The keyframe points are the colours of the rainbow.\n@Composable fun MultiColorSmoothText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, rainbow: List\u0026lt;Color\u0026gt; = PastelRainbow, startIndex: Int = 0, duration: Int ) { val infiniteTransition = rememberInfiniteTransition() val interval = duration / rainbow.size val color by infiniteTransition.animateColor( initialValue = rainbow[0], targetValue = rainbow.last(), animationSpec = infiniteRepeatable( animation = keyframes { durationMillis = duration delayMillis = startIndex * interval / 2 var i = 0 // set the keyframes from the rainbow with code  for (color in rainbow) { // this is the crux of setting the keyframes  color at i // at is an infix method in the KeyframesSpec class  i += interval } }, repeatMode = RepeatMode.Restart ) ) Text(text = text, color = color, style = style, modifier = modifier) } This composable can be used to loop through colours of the rainbow on a Text composable.\nFinally I built a composable that split the string again and made each letter a MultiColorSmoothText. It uses the startIndex to delay the animation. The effect is that each letter is a different colour.\n@Composable fun SmoothRainbowText( modifier: Modifier = Modifier, text: String, style: TextStyle = LocalTextStyle.current, rainbow: List\u0026lt;Color\u0026gt; = PastelRainbow, startColor: Int = 0, duration: Int = 1200 ) { Row(modifier) { var index = startColor for (letter in text) { MultiColorSmoothText( text = letter.toString(), style = style, rainbow = rainbow, startIndex = index, duration = duration ) index++ if (index == rainbow.size) index = 0 } } } And the final smooth animating rainbow text using a pastel rainbow.\nNext I\u0026rsquo;ll tackle some more retro 90s web page inspired animations, visitor counters, flames, rotating images, shifting tiled backgrounds and walls of text that change size.\nUntil then\u0026hellip; this ain\u0026rsquo;t not disco\nFind all the source in this repo\nAlso in this series:\nBlinkTag\nVisitorCounter\n","date":"2021-06-27T00:13:10+02:00","image":"https://www.maiatoday.net/p/animating-rainbow-text/noDisco_hua68bcb7d3448fc4e606dd0d887f39cde_62022_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/animating-rainbow-text/","title":"Animating Rainbow Text"},{"content":"I am exploring animations with small sampler functions using Jetpack Compose. This one is a custom component that draws a little pie chart. It will animate a random pie value on the click of the button.\ndata class PieData( val foreground: Color = Color.White, val strokeWidth: Dp = 4.dp, val percentage: Float ) @Composable fun PieStatus( modifier: Modifier = Modifier, pieData: PieData ) { var animationPlayed by remember { mutableStateOf(false) } val currentPercentage = animateFloatAsState( targetValue = if (animationPlayed) pieData.percentage else 0f, animationSpec = tween(1000) ) LaunchedEffect(key1 = true) { animationPlayed = true } Canvas( modifier = modifier ) { val canvasWidth = size.width val canvasHeight = size.height drawCircle( color = pieData.foreground, center = Offset(x = canvasWidth / 2, y = canvasHeight / 2), radius = canvasWidth / 2 - pieData.strokeWidth.toPx(), style = Stroke(width = pieData.strokeWidth.toPx()) ) val arcPadding = pieData.strokeWidth.toPx() * 2 drawArc( color = pieData.foreground, startAngle = -90f, sweepAngle = currentPercentage.value * 360, useCenter = true, topLeft = Offset(arcPadding, arcPadding), size = Size(size.width - (arcPadding * 2f), size.height - (arcPadding * 2f)) ) } } code\n","date":"2021-06-16T21:36:11Z","image":"https://www.maiatoday.net/p/random-animating-pie-button/randomPieBanner_hu76771219303a90c57653dfce99bbed18_102409_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/random-animating-pie-button/","title":"Random Animating Pie Button"},{"content":"Panel discussion with GDG Johannesburg and She Can Do\n  ","date":"2021-06-02T15:51:17+02:00","permalink":"https://www.maiatoday.net/p/she-can-do-panel-discussion-collaboration-between-designers-and-developers/","title":"She Can Do Panel discussion: Collaboration between designers and developers"},{"content":"Getting started with Jetpack compose Codelab and talk for International Women\u0026rsquo;s Day event with Women Techmakers and GDGs in Southern Africa\n  ","date":"2021-03-27T15:44:02+02:00","image":"https://www.maiatoday.net/p/international-womens-day-codelab-getting-started-with-compose/iwd_compose_hu717d3fa99c81c235cadff12f7e5495d7_237989_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/international-womens-day-codelab-getting-started-with-compose/","title":"International Womens Day Codelab - Getting started with Compose"},{"content":"Co presented with Charles Okot an first look at Jetpack and how we could use it.\n  ","date":"2021-03-04T15:36:17+02:00","image":"https://www.maiatoday.net/p/jetpack-compose-as-good-as-the-hype/compose_hype_hu7b702f9c9e66e2ebd596c24de62ae2f4_3154851_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/jetpack-compose-as-good-as-the-hype/","title":"Jetpack Compose - As good as the hype?"},{"content":"Co presenting a talk at Droidcon EMEA 2020\nvideo\nslides\n","date":"2020-10-09T15:19:42+02:00","image":"https://www.maiatoday.net/p/refresh-renew-refactor-modernising-a-large-android-app-with-many-users/droidcon2020_hu7ae20bfc8a56650eecd7ece339fd75b1_2039695_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/refresh-renew-refactor-modernising-a-large-android-app-with-many-users/","title":"Refresh, Renew, Refactor - modernising a large Android app with many users"},{"content":"Talk presented for GDG Johannesburg comparing dependency injection technologies.\n  slides\n","date":"2020-08-05T15:02:01+02:00","image":"https://www.maiatoday.net/p/dagger-hilt-koin-a-comparison/dagger_hilt_koin_hufcfe03a6981d09c2caf9a87d3fde49f1_86783_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/dagger-hilt-koin-a-comparison/","title":"Dagger, Hilt, Koin - a comparison"},{"content":"How to test kotlin coroutines by injecting dispatchers and using the testing apis. No one wants flakey tests and I want a time machine.\n  ","date":"2019-12-08T06:47:30+02:00","image":"https://www.maiatoday.net/p/testing-kotlin-coroutines/timeMachine_hub7bdfe26d2053975e22ffc5a25315e55_192202_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/testing-kotlin-coroutines/","title":"Testing Kotlin Coroutines"},{"content":"A sampler app to explore Coroutine testing. This is a toy app that simulates an 8 Ball. It can answer questions, find synonmyms, generate a password or check if a number is prime. It was created to make a situation where it makes sense to use coroutines to e.g. go on the network or make a calculation. Then I added tests for all the pieces using kotlinx-coroutine-test.\nAs a bonus the repo is set up to run the tests on CircleCi. It has detekt setup and jacoco code coverage. There is also a branch where all the tests are converted to junit5.\nDevfest 2019 video\nThis is the companion repo to the KotlinEveryWhereZA 2019 and DevFestZa 2019 talk. Slides are in the repo.\ncode\n","date":"2019-11-23T21:36:11Z","image":"https://www.maiatoday.net/p/hello8ball/Screenshot_1566145786_hu9195e699ef81636f1d4bdadf0d3d2a3d_107429_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/hello8ball/","title":"Hello8Ball"},{"content":"Pre pandemic Offerzen hosted a live panel on the future of work. Some thoughts on freelancing and remote work. All this has changed now, if only we knew\u0026hellip;\n  ","date":"2019-04-03T06:56:27+02:00","image":"https://www.maiatoday.net/p/future-of-work-panel/futureOfWork2019_hu2fb4721549dc6e6da67e9e3ab35c6ca7_4341034_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/future-of-work-panel/","title":"Future of Work Panel"},{"content":"Exploring railroad error handling in Kotlin. Pure Kotlin.\ncode\n","date":"2019-02-08T21:36:13Z","image":"https://www.maiatoday.net/p/hellotrain/errorTrain_hue47b273e844289ff9d9ad3e40db469b6_213705_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/hellotrain/","title":"HelloTrain"},{"content":"I have found myself adding jacoco and coverage limits to more than one Android project. Enough times for me to extract the gradle bits in to a little nugget of grooviness to just drop into a project as needed. For a while now I have been reading about test coverage numbers and working with my intuition about what is the most valuable thing for me to spend my time on when building something. Also Kotlin. In the light of this my gradle build file snippet contains the following:\n Jacoco for test coverage Kotlin support A way to choose important classes and only set coverage limits on those  Do this,\n  Put the gist in a file jacoco.gradle\n  Modify the jacoco.gradle file to add limits for your important packages.\n  Add this line to your build.gradle\n  apply from: 'jacoco.gradle'\nAnd then run the command  ./gradlew tasks\nto see what new tasks are there to run. e.g. in the reporting section find something similar to\n./gradlew/testDevDebugUnitTestCoverageVerification\nwhich will run the tests, make coverage reports and apply limits.\nFind the reports in a path similar to this  ~/your\\_project/your\\_module/build/reports/jacoco/testDevDebugUnitTestCoverage/html/index.html\nWithout further ado, the gist:\nThe code in the gist was taken from so many blogposts. I canât even remember them all. Thanks to the original authors.\nAlso note there is a small piece of cargo cult code that kept sneaking in from sundry blogposts that I donât need because I donât have Robolectric tests. As it turns out this code crashes unit tests on Java \u0026gt; 8. So remove this code if you have it and if it fits your usecase.\ntasks.withType(Test) { jacoco.includeNoLocationClasses = true } ","date":"2018-10-13T13:55:25Z","image":"https://www.maiatoday.net/p/note-to-future-me-add-jacoco-and-coverage-limits/blocks_huf1d7e73191add7de3e8ed3216495c76f_370280_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-add-jacoco-and-coverage-limits/","title":"Note to Future meâââadd jacoco and coverage limits"},{"content":"Adding the library to the app see commit 03bd7a7534f7a23276fc47c4f7c94d7ac153bc0b\n plugin dependencies  Making a service\n wrapping and existing endpoint https://github.com/joakin/wikimedia-graphql install node if you donât have it. nodeâââversion running the service `node index.js`Â  play with the serviceÂ   https://gist.github.com/maiatoday/578aebcee3bd9decb6e3c6833c73a4ba#file-wikipage-graphql\n getting the json.schema https://github.com/apollographql/apollo-codegen cd app/src/main/graphql/net/maiatoday/helloblondie apollo-codegen download-schema http://localhost:3002/graphqlâââoutput schema.json  Adding the service to the app\n adding a query adding the schema a5a47f0ff45f6bc5d5a3aa6f1fee50af363f7893 getting access to the service calling the service  Some pointers on query syntax\nGitrepo\n`sudo apollo-codegen introspect-schema https://api.blargh.com/graphqlâââheader âAuthorization: Bearer xxxxââââoutput schema.json`\n","date":"2018-04-08T21:36:13Z","image":"https://www.maiatoday.net/p/note-to-future-me-adding-graphql-to-an-app/helloBlondie_hub6b0760f108213d99a0f4e0d458697f9_171067_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-adding-graphql-to-an-app/","title":"Note to future me â Adding GraphQL to an app"},{"content":"I want to make my little experiments public and save them as a reminder for future me. So here is yet another post on Matchers and Espresso testing.\nI want to test this:\n  First activity starts another activity at a button click.\n  First activity passes a parcelable object to the second activity.\n  Test that the intent that starts the second activity contains the object with the correct properties.\n  I built a contrived example, MainActivity collects some info and passes this to StarActivity in a parcelable called ContrivedParams. See the sample code on GitHub.\nTo write the tests I brushed up on Hamcrest[1][2][3]: a library that makes it easier to write readable tests. Instead of\nassert(expected==actual) you can write almost-english\nassertThat(actual, is(expected)) which is a sugar coated version of\nassertThat(actual is(equalto(expected))) Sadly though is is a hard keyword in Kotlin so I ended up using the isA() and equalTo() varieties of calls rather than escaping is with backticks.\nAnother reason to use Hamcrestâââbetter error messages. Compare these two messages.\njava.lang.AssertionError at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:37) with the message given by a custom matcher\njava.lang.AssertionError: Expected: title should return âHello Worldâ but: was âHello World!â at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:42) or the error message given by an object matcher\njava.lang.AssertionError: Expected: \u0026lt;ContrivedParams(title=Hello World, starCount=3, colour=#00b0ff)\u0026gt; but: was \u0026lt;ContrivedParams(title=Hello World!, starCount=4, colour=#00b0fff)\u0026gt; at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:47) The parameters for the second activity is passed in a parcelable data class.\nI used the Espresso-intents libraryÂ . Start the activity with an IntentsTestRule. The IntentsTestRule initialises the Espresso intents before each test and releases them again after the test completes. I used the intended method to test the intent and the hasEntry method to check for the extra. I compared the extra with an expected object. As a bonus I wrote a custom matcher to check the properties of the object that was in the intent. Custom matchers are useful if you do not need to check all of the properties in the data object.\nThe intent test:\nOne of the custom matchers:\nAll green\n","date":"2018-01-26T14:54:45.273Z","image":"https://www.maiatoday.net/p/note-to-future-me-testing-intents-with-matchers/testResults_hu1ffbce21a844d54d5e824864182148d0_47423_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-testing-intents-with-matchers/","title":"Note to Future Me â Testing Intents with Matchers"},{"content":"Curious Keystore experiments. A small simple project that saves something in the keystore and gets it out again. Tricksiness happens across versions of Android.\ncode\n","date":"2017-11-12T21:36:13Z","image":"https://www.maiatoday.net/p/hellokeystore/keystore_hu81f1429f8c3b7ea134c38356eb3f95ee_73937_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/hellokeystore/","title":"HelloKeystore"},{"content":"I like to make sampler apps to explore new things to learn. I was wondering how the google location apis differed from the new awereness apis. The Geotaur repo has an app that can use either of these two interfaces. Since it builds two flavours you can run the apps side by side with the same geofences to see how they differ. While I was at it I tried my hand at some other tech too, firebase remote logging and db access, dependency injection.\nInstall from play:\nNeotaur{:target=\u0026quot;_blank\u0026quot;} Geotaur{:target=\u0026quot;_blank\u0026quot;} ","date":"2016-08-29T14:04:46+02:00","image":"https://www.maiatoday.net/p/neotaur-geotaur/neotaur_hua4805e05afbec37e90d33a845a642e56_115059_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/neotaur-geotaur/","title":"Neotaur-Geotaur"},{"content":"An android app to explore how apps can modify images and detect faces. The code is here.\n","date":"2014-10-09T21:36:13Z","image":"https://www.maiatoday.net/p/autoselfie-2013/feature_hu4c63134381f510c8888a831a8f17f866_372795_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/autoselfie-2013/","title":"autoselfie 2013"},{"content":"In 2013 I made a variation of an older kinect piece called seedSpark. There were some improvements in the code which now used Frame buffers.\n","date":"2014-10-09T21:26:46Z","image":"https://www.maiatoday.net/p/seed-spark-2013/snapshot_000_hu6a661611285a59ba164cedcb81fc5dfb_888673_120x120_fill_box_smart1_3.png","permalink":"https://www.maiatoday.net/p/seed-spark-2013/","title":"seed spark 2013"},{"content":"In 2012 I made my Masters exhibition using openframeworks and the Kinect. It consisted of 4 interactive works which explored concepts around human ideas and machine execution. The repo veloPeople contains all four works each in their own branch. Each work was built on a custom ubuntu live disk. So the installation works existed on flash disk. Given the right hardware you could boot from the flash disk and run one of the works.\n","date":"2014-10-09T20:54:30Z","image":"https://www.maiatoday.net/p/masters-2012/IMG_8522_hu0e9b783dcf4c1f3ce3b5e8463ee6bbc0_130583_120x120_fill_q75_box_smart1.JPG","permalink":"https://www.maiatoday.net/p/masters-2012/","title":"Masters 2012"}]