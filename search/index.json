[{"content":"I am exploring animations with small sampler functions using Jetpack Compose. This one is a custom component that draws a little pie chart. It will animate a random pie value on the click of the button.\n click and animate \ncode\n","date":"2021-06-16T21:36:11Z","image":"https://www.maiatoday.net/p/random-animating-pie-button/randomPieBanner_hu76771219303a90c57653dfce99bbed18_102409_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/random-animating-pie-button/","title":"Random Animating Pie Button"},{"content":"A sampler app to explore Coroutine testing. This is a toy app that simulates an 8 Ball. It can answer questions, find synonmyms, generate a password or check if a number is prime. It was created to make a situation where it makes sense to use coroutines to e.g. go on the network or make a calculation. Then I added tests for all the pieces using kotlinx-coroutine-test.\nAs a bonus the repo is set up to run the tests on CircleCi. It has detekt setup and jacoco code coverage. There is also a branch where all the tests are converted to junit5.\nDevfest 2019 video\nThis is the companion repo to the KotlinEveryWhereZA 2019 and DevFestZa 2019 talk. Slides are in the repo.\ncode\n","date":"2019-11-23T21:36:11Z","image":"https://www.maiatoday.net/p/hello8ball/Screenshot_1566145786_hu9195e699ef81636f1d4bdadf0d3d2a3d_107429_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/hello8ball/","title":"Hello8Ball"},{"content":"Exploring railroad error handling in Kotlin. Pure Kotlin.\ncode\n","date":"2019-02-08T21:36:13Z","image":"https://www.maiatoday.net/p/hellotrain/errorTrain_hue47b273e844289ff9d9ad3e40db469b6_213705_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/hellotrain/","title":"HelloTrain"},{"content":"I have found myself adding jacoco and coverage limits to more than one Android project. Enough times for me to extract the gradle bits in to a little nugget of grooviness to just drop into a project as needed. For a while now I have been reading about test coverage numbers and working with my intuition about what is the most valuable thing for me to spend my time on when building something. Also Kotlin. In the light of this my gradle build file snippet contains the following:\n Jacoco for test coverage Kotlin support A way to choose important classes and only set coverage limits on those  Do this,\n  Put the gist in a file jacoco.gradle\n  Modify the jacoco.gradle file to add limits for your important packages.\n  Add this line to your build.gradle\n  apply from: 'jacoco.gradle'\nAnd then run the command  ./gradlew tasks\nto see what new tasks are there to run. e.g. in the reporting section find something similar to\n./gradlew/testDevDebugUnitTestCoverageVerification\nwhich will run the tests, make coverage reports and apply limits.\nFind the reports in a path similar to this  ~/your\\_project/your\\_module/build/reports/jacoco/testDevDebugUnitTestCoverage/html/index.html\nWithout further ado, the gist:\nThe code in the gist was taken from so many blogposts. I can’t even remember them all. Thanks to the original authors.\nAlso note there is a small piece of cargo cult code that kept sneaking in from sundry blogposts that I don’t need because I don’t have Robolectric tests. As it turns out this code crashes unit tests on Java \u0026gt; 8. So remove this code if you have it and if it fits your usecase.\ntasks.withType(Test) { jacoco.includeNoLocationClasses = true } ","date":"2018-10-13T13:55:25Z","image":"https://www.maiatoday.net/p/note-to-future-me-add-jacoco-and-coverage-limits/blocks_huf1d7e73191add7de3e8ed3216495c76f_370280_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-add-jacoco-and-coverage-limits/","title":"Note to Future me — add jacoco and coverage limits"},{"content":"Adding the library to the app see commit 03bd7a7534f7a23276fc47c4f7c94d7ac153bc0b\n plugin dependencies  Making a service\n wrapping and existing endpoint https://github.com/joakin/wikimedia-graphql install node if you don’t have it. node — version running the service `node index.js`  play with the service   https://gist.github.com/maiatoday/578aebcee3bd9decb6e3c6833c73a4ba#file-wikipage-graphql\n getting the json.schema https://github.com/apollographql/apollo-codegen cd app/src/main/graphql/net/maiatoday/helloblondie apollo-codegen download-schema http://localhost:3002/graphql — output schema.json  Adding the service to the app\n adding a query adding the schema a5a47f0ff45f6bc5d5a3aa6f1fee50af363f7893 getting access to the service calling the service   \nSome pointers on query syntax\nGitrepo\n`sudo apollo-codegen introspect-schema https://api.blargh.com/graphql — header “Authorization: Bearer xxxx” — output schema.json`\n","date":"2018-04-08T21:36:13Z","image":"https://www.maiatoday.net/p/note-to-future-me-adding-graphql-to-an-app/helloBlondie_hub6b0760f108213d99a0f4e0d458697f9_171067_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-adding-graphql-to-an-app/","title":"Note to future me — Adding GraphQL to an app"},{"content":"I want to make my little experiments public and save them as a reminder for future me. So here is yet another post on Matchers and Espresso testing.\nI want to test this:\n  First activity starts another activity at a button click.\n  First activity passes a parcelable object to the second activity.\n  Test that the intent that starts the second activity contains the object with the correct properties.\n  I built a contrived example, MainActivity collects some info and passes this to StarActivity in a parcelable called ContrivedParams. See the sample code on GitHub.\n   \nTo write the tests I brushed up on Hamcrest[1][2][3]: a library that makes it easier to write readable tests. Instead of\nassert(expected==actual) you can write almost-english\nassertThat(actual, is(expected)) which is a sugar coated version of\nassertThat(actual is(equalto(expected))) Sadly though is is a hard keyword in Kotlin so I ended up using the isA() and equalTo() varieties of calls rather than escaping is with backticks.\nAnother reason to use Hamcrest — better error messages. Compare these two messages.\njava.lang.AssertionError at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:37) with the message given by a custom matcher\njava.lang.AssertionError: Expected: title should return “Hello World” but: was “Hello World!” at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:42) or the error message given by an object matcher\njava.lang.AssertionError: Expected: \u0026lt;ContrivedParams(title=Hello World, starCount=3, colour=#00b0ff)\u0026gt; but: was \u0026lt;ContrivedParams(title=Hello World!, starCount=4, colour=#00b0fff)\u0026gt; at net.maiatoday.hellointentmatcher.ContrivedParamsTest.showErroMessagesTest(ContrivedParamsTest.kt:47) The parameters for the second activity is passed in a parcelable data class.\nI used the Espresso-intents library . Start the activity with an IntentsTestRule. The IntentsTestRule initialises the Espresso intents before each test and releases them again after the test completes. I used the intended method to test the intent and the hasEntry method to check for the extra. I compared the extra with an expected object. As a bonus I wrote a custom matcher to check the properties of the object that was in the intent. Custom matchers are useful if you do not need to check all of the properties in the data object.\nThe intent test:\nOne of the custom matchers:\n All green  All green\n","date":"2018-01-26T14:54:45.273Z","image":"https://www.maiatoday.net/p/note-to-future-me-testing-intents-with-matchers/testResults_hu1ffbce21a844d54d5e824864182148d0_47423_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/note-to-future-me-testing-intents-with-matchers/","title":"Note to Future Me — Testing Intents with Matchers"},{"content":"Curious Keystore experiments. A small simple project that saves something in the keystore and gets it out again. Tricksiness happens across versions of Android.\ncode\n","date":"2017-11-12T21:36:13Z","image":"https://www.maiatoday.net/p/hellokeystore/keystore_hu81f1429f8c3b7ea134c38356eb3f95ee_73937_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/hellokeystore/","title":"HelloKeystore"},{"content":"I like to make sampler apps to explore new things to learn. I was wondering how the google location apis differed from the new awereness apis. The Geotaur repo has an app that can use either of these two interfaces. Since it builds two flavours you can run the apps side by side with the same geofences to see how they differ. While I was at it I tried my hand at some other tech too, firebase remote logging and db access, dependency injection.\nInstall from play:\nNeotaur{:target=\u0026quot;_blank\u0026quot;} Geotaur{:target=\u0026quot;_blank\u0026quot;} ","date":"2016-08-29T14:04:46+02:00","image":"https://www.maiatoday.net/p/neotaur-geotaur/neotaur_hua4805e05afbec37e90d33a845a642e56_115059_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/neotaur-geotaur/","title":"Neotaur-Geotaur"},{"content":"An android app to explore how apps can modify images and detect faces. The code is here.\n","date":"2014-10-09T21:36:13Z","image":"https://www.maiatoday.net/p/autoselfie-2013/feature_hu4c63134381f510c8888a831a8f17f866_372795_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/autoselfie-2013/","title":"autoselfie 2013"},{"content":"In 2013 I made a variation of an older kinect piece called seedSpark. There were some improvements in the code which now used Frame buffers.\n","date":"2014-10-09T21:26:46Z","image":"https://www.maiatoday.net/p/seed-spark-2013/snapshot_000_hu6a661611285a59ba164cedcb81fc5dfb_888673_120x120_fill_box_smart1_2.png","permalink":"https://www.maiatoday.net/p/seed-spark-2013/","title":"seed spark 2013"},{"content":"In 2012 I made my Masters exhibition using openframeworks and the Kinect. It consisted of 4 interactive works which explored concepts around human ideas and machine execution. The repo veloPeople contains all four works each in their own branch. Each work was built on a custom ubuntu live disk. So the installation works existed on flash disk. Given the right hardware you could boot from the flash disk and run one of the works.\n","date":"2014-10-09T20:54:30Z","image":"https://www.maiatoday.net/p/masters-2012/IMG_8522_hu0e9b783dcf4c1f3ce3b5e8463ee6bbc0_130583_120x120_fill_q75_box_smart1.JPG","permalink":"https://www.maiatoday.net/p/masters-2012/","title":"Masters 2012"}]