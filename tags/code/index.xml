<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on maiatoday</title><link>https://maiatoday.github.io/tags/code/</link><description>Recent content in code on maiatoday</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Jun 2021 00:13:10 +0200</lastBuildDate><atom:link href="https://maiatoday.github.io/tags/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Animating Rainbow Text</title><link>https://maiatoday.github.io/p/animating-rainbow-text/</link><pubDate>Sun, 27 Jun 2021 00:13:10 +0200</pubDate><guid>https://maiatoday.github.io/p/animating-rainbow-text/</guid><description>Do you remember web pages in the nineties? Everything was pulsing, rotating and animating. I am exploring Jetpack Compose animations and I figured if I can reproduce a 90s web page look, I can do anything. Also June is the month of Rainbows. So to kick off this series I am building animating rainbow text.
First I need a rainbow. It needs to be flexible enough for me to be able to swap in any rainbow.</description></item><item><title>Random Animating Pie Button</title><link>https://maiatoday.github.io/p/random-animating-pie-button/</link><pubDate>Wed, 16 Jun 2021 21:36:11 +0000</pubDate><guid>https://maiatoday.github.io/p/random-animating-pie-button/</guid><description>I am exploring animations with small sampler functions using Jetpack Compose. This one is a custom component that draws a little pie chart. It will animate a random pie value on the click of the button.
click and animate
data class PieData( val foreground: Color = Color.White, val strokeWidth: Dp = 4.dp, val percentage: Float ) @Composable fun PieStatus( modifier: Modifier = Modifier, pieData: PieData ) { var animationPlayed by remember { mutableStateOf(false) } val currentPercentage = animateFloatAsState( targetValue = if (animationPlayed) pieData.</description></item><item><title>Hello8Ball</title><link>https://maiatoday.github.io/p/hello8ball/</link><pubDate>Sat, 23 Nov 2019 21:36:11 +0000</pubDate><guid>https://maiatoday.github.io/p/hello8ball/</guid><description>A sampler app to explore Coroutine testing. This is a toy app that simulates an 8 Ball. It can answer questions, find synonmyms, generate a password or check if a number is prime. It was created to make a situation where it makes sense to use coroutines to e.g. go on the network or make a calculation. Then I added tests for all the pieces using kotlinx-coroutine-test.
As a bonus the repo is set up to run the tests on CircleCi.</description></item><item><title>HelloTrain</title><link>https://maiatoday.github.io/p/hellotrain/</link><pubDate>Fri, 08 Feb 2019 21:36:13 +0000</pubDate><guid>https://maiatoday.github.io/p/hellotrain/</guid><description>Exploring railroad error handling in Kotlin. Pure Kotlin.
code</description></item><item><title>Note to Future Me â€” Testing Intents with Matchers</title><link>https://maiatoday.github.io/p/note-to-future-me-testing-intents-with-matchers/</link><pubDate>Fri, 26 Jan 2018 14:54:45 +0000</pubDate><guid>https://maiatoday.github.io/p/note-to-future-me-testing-intents-with-matchers/</guid><description>I want to make my little experiments public and save them as a reminder for future me. So here is yet another post on Matchers and Espresso testing.
I want to test this:
First activity starts another activity at a button click.
First activity passes a parcelable object to the second activity.
Test that the intent that starts the second activity contains the object with the correct properties.</description></item><item><title>HelloKeystore</title><link>https://maiatoday.github.io/p/hellokeystore/</link><pubDate>Sun, 12 Nov 2017 21:36:13 +0000</pubDate><guid>https://maiatoday.github.io/p/hellokeystore/</guid><description>Curious Keystore experiments. A small simple project that saves something in the keystore and gets it out again. Tricksiness happens across versions of Android.
code</description></item></channel></rss>