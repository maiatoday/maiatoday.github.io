<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>code on maiatoday</title><link>https://maiatoday.github.io/tags/code/</link><description>Recent content in code on maiatoday</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 28 Feb 2022 21:43:48 +0200</lastBuildDate><atom:link href="https://maiatoday.github.io/tags/code/index.xml" rel="self" type="application/rss+xml"/><item><title>Links to Learn Compose</title><link>https://maiatoday.github.io/p/links-to-learn-compose/</link><pubDate>Mon, 28 Feb 2022 21:43:48 +0200</pubDate><guid>https://maiatoday.github.io/p/links-to-learn-compose/</guid><description>Official docs Official Docs
Pathway
Official apps Jetpack Compose Samples
Material Catalog
Community websites Jetpackcompose.app
compose.academy
Jetpack Compose Playground
Video Philip Lackner Compose playist
Coding in Flow
Books Android UI Development with Jetpack Compose - Thomas Künneth
Practical Jetpack Compose - Joe Birch
Compose Internals - Jorge Castillo
Twitch Coding with the Italians
Kibeth Codes
Adam McNeilly
Florian Walther</description></item><item><title>Confetti Cleanup</title><link>https://maiatoday.github.io/p/confetti-cleanup/</link><pubDate>Fri, 31 Dec 2021 07:37:42 +0200</pubDate><guid>https://maiatoday.github.io/p/confetti-cleanup/</guid><description>In my exploration of animation in Jetpack Compose I built a Confetti modifier that could be applied to any composable. I first showed the modifier in my presentation for Chicago Roboto but since I made it something was bothering me. The way that I can get the state in Compose to register change is by making copies of objects or making new objects. For a modifier that uses particles this can be many objects.</description></item><item><title>Welcome you are visitor number 12345</title><link>https://maiatoday.github.io/p/welcome-you-are-visitor-number-12345/</link><pubDate>Mon, 12 Jul 2021 21:44:03 +0200</pubDate><guid>https://maiatoday.github.io/p/welcome-you-are-visitor-number-12345/</guid><description>Another step forward in recreating the icon 90s website look is the hit counter, visitor counter or web counter in classic squemorphic odometer style.
hit counters
I was inspired by a recent episode of Code with Italians where they animated a time field. I wanted to change the counter component to animate each number individually to get that odometer look.
Before doing this though there was a question of state.</description></item><item><title>&lt;blink> like it's 1999</title><link>https://maiatoday.github.io/p/blink-like-its-1999/</link><pubDate>Sat, 03 Jul 2021 17:27:21 +0200</pubDate><guid>https://maiatoday.github.io/p/blink-like-its-1999/</guid><description>Another small experiment to explore Jetpack Compose animations. I came to the conclusion that any value that is passed as a parameter could be animated, including anything in the modifier. So I set out to build a &amp;lt;blink&amp;gt; tag.
My first attempt creates a composable function that takes the modifier, animates it and passes it back to the content lambda. Like this:
@Composable fun BlinkTag( modifier: Modifier = Modifier, durationMillis: Int = 500, content: @Composable (modifier: Modifier) -&amp;gt; Unit ) { val infiniteTransition = rememberInfiniteTransition() val alpha: Float by infiniteTransition.</description></item><item><title>Animating Rainbow Text</title><link>https://maiatoday.github.io/p/animating-rainbow-text/</link><pubDate>Sun, 27 Jun 2021 00:13:10 +0200</pubDate><guid>https://maiatoday.github.io/p/animating-rainbow-text/</guid><description>Do you remember web pages in the nineties? Everything was pulsing, rotating and animating. I am exploring Jetpack Compose animations and I figured if I can reproduce a 90s web page look, I can do anything. Also June is the month of Rainbows. So to kick off this series I am building animating rainbow text.
First I need a rainbow. It needs to be flexible enough for me to be able to swap in any rainbow.</description></item><item><title>Random Animating Pie Button</title><link>https://maiatoday.github.io/p/random-animating-pie-button/</link><pubDate>Wed, 16 Jun 2021 21:36:11 +0000</pubDate><guid>https://maiatoday.github.io/p/random-animating-pie-button/</guid><description>I am exploring animations with small sampler functions using Jetpack Compose. This one is a custom component that draws a little pie chart. It will animate a random pie value on the click of the button.
click and animate
data class PieData( val foreground: Color = Color.White, val strokeWidth: Dp = 4.dp, val percentage: Float ) @Composable fun PieStatus( modifier: Modifier = Modifier, pieData: PieData ) { var animationPlayed by remember { mutableStateOf(false) } val currentPercentage = animateFloatAsState( targetValue = if (animationPlayed) pieData.</description></item><item><title>International Womens Day Codelab - Getting started with Compose</title><link>https://maiatoday.github.io/p/international-womens-day-codelab-getting-started-with-compose/</link><pubDate>Sat, 27 Mar 2021 15:44:02 +0200</pubDate><guid>https://maiatoday.github.io/p/international-womens-day-codelab-getting-started-with-compose/</guid><description>Getting started with Jetpack compose Codelab and talk for International Womens Day event with Women Techmakers and GDGs in Southern Africa</description></item><item><title>Hello8Ball</title><link>https://maiatoday.github.io/p/hello8ball/</link><pubDate>Sat, 23 Nov 2019 21:36:11 +0000</pubDate><guid>https://maiatoday.github.io/p/hello8ball/</guid><description>A sampler app to explore Coroutine testing. This is a toy app that simulates an 8 Ball. It can answer questions, find synonmyms, generate a password or check if a number is prime. It was created to make a situation where it makes sense to use coroutines to e.g. go on the network or make a calculation. Then I added tests for all the pieces using kotlinx-coroutine-test.
As a bonus the repo is set up to run the tests on CircleCi.</description></item><item><title>HelloTrain</title><link>https://maiatoday.github.io/p/hellotrain/</link><pubDate>Fri, 08 Feb 2019 21:36:13 +0000</pubDate><guid>https://maiatoday.github.io/p/hellotrain/</guid><description>Exploring railroad error handling in Kotlin. Pure Kotlin.
code</description></item><item><title>Note to Future Me — Testing Intents with Matchers</title><link>https://maiatoday.github.io/p/note-to-future-me-testing-intents-with-matchers/</link><pubDate>Fri, 26 Jan 2018 14:54:45 +0000</pubDate><guid>https://maiatoday.github.io/p/note-to-future-me-testing-intents-with-matchers/</guid><description>I want to make my little experiments public and save them as a reminder for future me. So here is yet another post on Matchers and Espresso testing.
I want to test this:
First activity starts another activity at a button click.
First activity passes a parcelable object to the second activity.
Test that the intent that starts the second activity contains the object with the correct properties.</description></item><item><title>HelloKeystore</title><link>https://maiatoday.github.io/p/hellokeystore/</link><pubDate>Sun, 12 Nov 2017 21:36:13 +0000</pubDate><guid>https://maiatoday.github.io/p/hellokeystore/</guid><description>Curious Keystore experiments. A small simple project that saves something in the keystore and gets it out again. Tricksiness happens across versions of Android.
code</description></item></channel></rss>