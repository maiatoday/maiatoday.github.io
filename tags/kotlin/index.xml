<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kotlin on maiatoday</title><link>https://www.maiatoday.net/tags/kotlin/</link><description>Recent content in Kotlin on maiatoday</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 18 Sep 2024 19:50:02 +0200</lastBuildDate><atom:link href="https://www.maiatoday.net/tags/kotlin/index.xml" rel="self" type="application/rss+xml"/><item><title>Flash cards for Coroutines - KotlinFlashKards</title><link>https://www.maiatoday.net/p/flash-cards-for-coroutines-kotlinflashkards/</link><pubDate>Wed, 18 Sep 2024 19:50:02 +0200</pubDate><guid>https://www.maiatoday.net/p/flash-cards-for-coroutines-kotlinflashkards/</guid><description>&lt;img src="https://www.maiatoday.net/p/flash-cards-for-coroutines-kotlinflashkards/banner.jpg" alt="Featured image of post Flash cards for Coroutines - KotlinFlashKards" />&lt;p>I made something. I made &lt;a class="link" href="https://plugins.jetbrains.com/plugin/25329-kotlinflashkards--coroutines?noRedirect=true" target="_blank" rel="noopener"
>a set of flash cards to practise and learn Kotlin coroutines&lt;/a>. I call them KotlinFlashKards (with a K of course). Here is my first set. It helps to learn coroutines&lt;/p>
&lt;h2 id="why-create-flash-cards">Why create flash cards?
&lt;/h2>&lt;p>Does this happen to you? You are writing some code, you know something is possible but you can&amp;rsquo;t remember exactly how to do it. By the time you have asked an AI or researched you have forgotten what it was you wanted to do in the first place.&lt;/p>
&lt;p>There is a way to fix this. Learn and remember the key concepts you use often. One way to do this is to use flash cards. I learnt this from the book &lt;a class="link" href="https://www.manning.com/books/the-programmers-brain" target="_blank" rel="noopener"
>The Programmers Brain by Felienne Hermans&lt;/a>&lt;/p>
&lt;h2 id="how-does-it-work">How does it work?
&lt;/h2>&lt;p>The deck doesn&amp;rsquo;t replace the &lt;a class="link" href="kotlinlang.org" >docs&lt;/a> or a &lt;a class="link" href="https://www.manning.com/books/kotlin-in-action-second-edition" target="_blank" rel="noopener"
>good book&lt;/a>.It is an in IDE course in the form of a question, a hint that hides the answer and a code snippet with a test to explain the concept. It has four sections&lt;/p>
&lt;ul>
&lt;li>Basics - 18 cards&lt;/li>
&lt;li>Structured Concurrency - 12 cards&lt;/li>
&lt;li>Error handling - 7 cards&lt;/li>
&lt;li>Testing - 6 cards&lt;/li>
&lt;/ul>
&lt;p>You can explore the sections in order or dip in and try tasks at random.&lt;/p>
&lt;h2 id="strategies-to-get-the-best-out-of-the-course">Strategies to get the best out of the course?
&lt;/h2>&lt;ol>
&lt;li>
&lt;p>&lt;strong>Repeat at regular intervals&lt;/strong> - Memories are built up if you &lt;strong>repeat&lt;/strong> the flash cards at &lt;strong>regular intervals&lt;/strong>. It is better to do a few lessons more often than to do many lessons in one sitting. You can do the course many times or choose which areas to practise.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Recall the answer before peeking&lt;/strong> - It is important to try to recall the syntax first before looking at the hints or letting the IDE help you. This means you practise your &lt;strong>recall&lt;/strong> of the memory.&lt;/p>
&lt;/li>
&lt;li>
&lt;p>&lt;strong>Think about the solution&lt;/strong> - For each question and answer you will remember it better too if you think of a practical place where you could use similar code.&lt;/p>
&lt;/li>
&lt;/ol>
&lt;h2 id="how-do-i-get-it">How do I get it?
&lt;/h2>&lt;p>You need:&lt;/p>
&lt;ul>
&lt;li>a JetBrains IDE like Android Studio or Intellij Community edition&lt;/li>
&lt;li>the &lt;a class="link" href="https://plugins.jetbrains.com/plugin/10081-jetbrains-academy" target="_blank" rel="noopener"
>JetBrains Acadamy plugin&lt;/a> installed&lt;/li>
&lt;/ul>
&lt;p>Then do the following:&lt;/p>
&lt;ol>
&lt;li>Before opening a project click on the Learn menu item on the left&lt;/li>
&lt;li>Click on New course&lt;/li>
&lt;li>In the &lt;code>Marketplace&lt;/code> search for &lt;code>KotlinFlashKards&lt;/code> and start the course. This will make a local instance of the course&lt;/li>
&lt;li>Have fun and explore, try figuring out the answers to the questions and don&amp;rsquo;t peek before you have thought a bit.&lt;/li>
&lt;li>If you mess up the code reset it with this button.&lt;/li>
&lt;li>If you want to skip ahead use the arrow or the numbers.&lt;/li>
&lt;/ol>
&lt;img src="marketplace.png" alt="Getting the flash cards" width="600"/>
&lt;img src="kard-2.png" alt="Course interface" width="600"/>
&lt;h2 id="what-else-can-i-do">What else can I do?
&lt;/h2>&lt;ul>
&lt;li>Rate the course&lt;/li>
&lt;li>Give feedback&lt;/li>
&lt;li>Tell me if there are other topics you want flash cards on, I have a flows one coming out soon&lt;/li>
&lt;/ul></description></item><item><title>50 ways to run some Kotlin code</title><link>https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/</link><pubDate>Sun, 11 Aug 2024 13:47:49 +0200</pubDate><guid>https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/</guid><description>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/runKodee.png" alt="Featured image of post 50 ways to run some Kotlin code" />&lt;p>Here&amp;rsquo;s the situation. You find a snippet of Kotlin code somewhere on the Internet or in a book. You want to try it out. What is the quickest path to messing with the code? Here are some recipes for some options. I sorted them from the quickest no tools and no project all the way through to all the tools and all the projects. I&amp;rsquo;ll provide info on how to add a library as dependencies if possible in each of the solutions.&lt;/p>
&lt;p>All of the options are free except the Intelij Enterprise IDE one.&lt;/p>
&lt;p>&lt;em>Disclaimers:&lt;/em>&lt;/p>
&lt;ol>
&lt;li>This is not a complete guide, it is opinionated and it is a snapshot of the current state of the tools. Things always change and your favourite may not be listed.&lt;/li>
&lt;li>I tested most of these on my Mac so the solutions are Mac-centric. If you want to try them on another OS, you may need to fiddle and research a bit more.&lt;/li>
&lt;li>I usually code for myself or for mobile so no serverside or web code or docker containers.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/kodee-excited.png"
width="250"
height="250"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/kodee-excited_hu7492807376612341061.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/kodee-excited_hu429942084425830077.png 1024w"
loading="lazy"
alt="Let&amp;rsquo;s Go!"
class="gallery-image"
data-flex-grow="100"
data-flex-basis="240px"
>&lt;/p>
&lt;h1 id="quicklinks">Quicklinks
&lt;/h1>&lt;p>Here is an overview with links so you can jump directly to what suits your needs&lt;/p>
&lt;table>
&lt;thead>
&lt;tr>
&lt;th style="text-align: left">Tools&lt;/th>
&lt;th style="text-align: left">No project&lt;/th>
&lt;th style="text-align: left">with project&lt;/th>
&lt;/tr>
&lt;/thead>
&lt;tbody>
&lt;tr>
&lt;td style="text-align: left">Browser&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="#playground" >Playground&lt;/a>&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="#datalore" >Datalore&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">CLI&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="#compile-and-run" >Compile and run&lt;/a> &lt;a class="link" href="#repl" >REPL&lt;/a>&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="#amper" >Amper&lt;/a> &lt;a class="link" href="#gradle" >Gradle&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Fleet&lt;/td>
&lt;td style="text-align: left">👆 See CLI section&lt;/td>
&lt;td style="text-align: left">👆 &lt;a class="link" href="#amper" >Amper&lt;/a> &lt;a class="link" href="#gradle" >Gradle&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">Intellij Community/Android Studio&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="#scratch-file" >Scratch file&lt;/a>&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="#wizard" >Wizard&lt;/a>&lt;/td>
&lt;/tr>
&lt;tr>
&lt;td style="text-align: left">IDE Intellij Enterprise (not free)&lt;/td>
&lt;td style="text-align: left">&lt;a class="link" href="#intellij-enterprise-and-notebook" >Notebook&lt;/a>&lt;/td>
&lt;td style="text-align: left">See Intellij Community section&lt;/td>
&lt;/tr>
&lt;/tbody>
&lt;/table>
&lt;p>&lt;a class="link" href="#what-next" >Resources&lt;/a>&lt;/p>
&lt;h1 id="browser">Browser
&lt;/h1>&lt;p>This recipe is for when you don&amp;rsquo;t have a computer where you can install things. Maybe you are on a tablet or you are in an internet cafe in an unknown place or borrowing your neighbours laptop. It is good for code snippets that use standard java or kotlin libraries and output text.&lt;/p>
&lt;h2 id="playground">Playground
&lt;/h2>&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-playground.png"
width="1218"
height="614"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-playground_hu17619968913386725222.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-playground_hu10623720097698865015.png 1024w"
loading="lazy"
alt="Playground"
class="gallery-image"
data-flex-grow="198"
data-flex-basis="476px"
>&lt;/p>
&lt;h3 id="you-need">You need
&lt;/h3>&lt;ul>
&lt;li>A browser&lt;/li>
&lt;li>A website that can run code e.g. &lt;a class="link" href="https://play.kotlinlang.org" target="_blank" rel="noopener"
>Kotlin playground&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="recipe">Recipe
&lt;/h3>&lt;ol>
&lt;li>open &lt;a class="link" href="https://play.kotlinlang.org" target="_blank" rel="noopener"
>this&lt;/a> website&lt;/li>
&lt;li>paste or type some code&lt;/li>
&lt;li>run &lt;code>Ctrl + R&lt;/code>&lt;/li>
&lt;/ol>
&lt;h3 id="adding-dependencies">Adding dependencies
&lt;/h3>&lt;p>A good way to see what you can add is to autocomplete an &lt;code>import&lt;/code> statement. You have access to kotlin, kotlinx, java and javax. If you want to add other libraries you need to run your own instance of the kotlin playground with the libraries you need or you need to find an instance where this is supported. Not really recommended. I would just use an &lt;a class="link" href="#amper" >Amper&lt;/a> project if you need dependencies.&lt;/p>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-playground-import.png"
width="1042"
height="516"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-playground-import_hu8026927144904049083.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-playground-import_hu9635977428203814149.png 1024w"
loading="lazy"
alt="Playground import"
class="gallery-image"
data-flex-grow="201"
data-flex-basis="484px"
>&lt;/p>
&lt;h2 id="datalore">Datalore
&lt;/h2>&lt;p>This solution is still Browser based. It is useful if you want to collect a few pieces of Kotlin code and you like a Notebook interface and the supported tools. There is a free tier of Datalore available.&lt;/p>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-datalore.png"
width="1324"
height="844"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-datalore_hu15528936108520992446.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-datalore_hu12923918088485773730.png 1024w"
loading="lazy"
alt="Datalore"
class="gallery-image"
data-flex-grow="156"
data-flex-basis="376px"
>&lt;/p>
&lt;h3 id="you-need-1">You need
&lt;/h3>&lt;ul>
&lt;li>A browser&lt;/li>
&lt;li>A Datalore login&lt;/li>
&lt;/ul>
&lt;h3 id="recipe-1">Recipe
&lt;/h3>&lt;ol>
&lt;li>open &lt;a class="link" href="https://datalore.jetbrains.com" target="_blank" rel="noopener"
>this&lt;/a> website and log in&lt;/li>
&lt;li>Open a new kotlin notebook and paste or type some code in a code cell&lt;/li>
&lt;li>click the run button&lt;/li>
&lt;/ol>
&lt;h3 id="adding-dependencies-1">Adding dependencies
&lt;/h3>&lt;p>The trick with the autocomplete on import works here too. You have access to kotlin, kotlinx, java and javax. You can also add some select libraries like &lt;a class="link" href="https://kotlin.github.io/kandy/welcome.html" target="_blank" rel="noopener"
>kandy&lt;/a> with the &lt;code>%use&lt;/code> magic word.&lt;/p>
&lt;h1 id="cli">CLI
&lt;/h1>&lt;p>This is for people who are happy to run things on the command line. It doesn&amp;rsquo;t matter where the code is created, it could be vim or an echo command. Read more at the &lt;a class="link" href="https://kotlinlang.org/docs/command-line.html" target="_blank" rel="noopener"
>official kotlin docs&lt;/a>.&lt;/p>
&lt;h2 id="compile-and-run">Compile and run
&lt;/h2>&lt;p>The bare bones approach but it becomes a pain if you want to use libraries other than the standard ones or you want to split your code in more than one file.&lt;/p>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-compile-run.png"
width="1392"
height="406"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-compile-run_hu16916617382231688584.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-compile-run_hu9684844319567453495.png 1024w"
loading="lazy"
alt="Compile and Run"
class="gallery-image"
data-flex-grow="342"
data-flex-basis="822px"
>&lt;/p>
&lt;h3 id="you-need-2">You need
&lt;/h3>&lt;ul>
&lt;li>A &lt;a class="link" href="https://iterm2.com/" target="_blank" rel="noopener"
>terminal&lt;/a>&lt;/li>
&lt;li>A &lt;a class="link" href="https://formulae.brew.sh/formula/openjdk" target="_blank" rel="noopener"
>Java installation&lt;/a>&lt;/li>
&lt;li>The &lt;a class="link" href="https://formulae.brew.sh/formula/kotlin" target="_blank" rel="noopener"
>kotlin compiler&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="recipe-2">Recipe
&lt;/h3>&lt;ol>
&lt;li>&lt;code>echo 'fun main() { println(&amp;quot;Hello, World&amp;quot;)}' &amp;gt; hello.kt&lt;/code>&lt;/li>
&lt;li>&lt;code>kotlinc hello.kt -include-runtime -d hello.jar&lt;/code> # compile the code and package it in a jar with a runtime&lt;/li>
&lt;li>&lt;code>java -jar hello.jar&lt;/code> # run the jar with java&lt;/li>
&lt;/ol>
&lt;h3 id="adding-dependencies-2">Adding dependencies
&lt;/h3>&lt;p>You need to add dependencies on the command line, this may be a pain as you probably need the jars to include them. (not recommended)&lt;/p>
&lt;h2 id="repl">REPL
&lt;/h2>&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-repl.png"
width="1384"
height="434"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-repl_hu389958759780755462.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-repl_hu4937500661031583832.png 1024w"
loading="lazy"
alt="REPL"
class="gallery-image"
data-flex-grow="318"
data-flex-basis="765px"
>&lt;/p>
&lt;p>REPL stands for &lt;strong>r&lt;/strong>ead-&lt;strong>e&lt;/strong>val-&lt;strong>p&lt;/strong>rint-&lt;strong>l&lt;/strong>oop. It is an interactive environment to run code. If you have the kotlin compiler installed you can simply run &lt;code>kotlinc&lt;/code> and you will be in the REPL. &lt;code>^C&lt;/code> to kill it and exit. Use only for very transient experiments.&lt;/p>
&lt;h2 id="gradle">Gradle
&lt;/h2>&lt;p>This recipe uses gradle to generate a template project. You can then add all the files and dependencies to the project.&lt;/p>
&lt;h3 id="you-need-3">You need
&lt;/h3>&lt;ul>
&lt;li>A &lt;a class="link" href="https://iterm2.com/" target="_blank" rel="noopener"
>terminal&lt;/a>&lt;/li>
&lt;li>A &lt;a class="link" href="https://formulae.brew.sh/formula/openjdk" target="_blank" rel="noopener"
>Java installation&lt;/a>&lt;/li>
&lt;li>A &lt;a class="link" href="https://formulae.brew.sh/formula/gradle" target="_blank" rel="noopener"
>gradle installation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="recipe-3">Recipe
&lt;/h3>&lt;ol>
&lt;li>&lt;code>mkdir myNewProject; cd myNewProject&lt;/code>&lt;/li>
&lt;li>&lt;code>gradle init&lt;/code> # follow the prompts choosing application and kotlin and mostly defaults. See the screenshot for my choices. Every thing should be setup with the files in the &lt;code>app/src&lt;/code> folder and &lt;code>gradlew&lt;/code> script in the root of the project&lt;/li>
&lt;li>&lt;code>./gradlew run&lt;/code> # runs the project - on Mac/Linux or &lt;code>./gradlew test&lt;/code> to run tests&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-gradle.png"
width="1942"
height="1486"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-gradle_hu8640306167332687155.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-gradle_hu14004515015913868128.png 1024w"
loading="lazy"
alt="Gradle init"
class="gallery-image"
data-flex-grow="130"
data-flex-basis="313px"
>&lt;/p>
&lt;h3 id="adding-dependencies-3">Adding dependencies
&lt;/h3>&lt;p>You can add dependencies in the &lt;code>app/build.gradle.kts&lt;/code> file in the dependencies section. You need to explicitly add a dependency for stdlib and kotlinx libraries&lt;/p>
&lt;h2 id="amper">Amper
&lt;/h2>&lt;p>Same as the gradle solution but using Amper. It gives a simpler more streamlined project. It can use gradle under the hood.&lt;/p>
&lt;h3 id="you-need-4">You need
&lt;/h3>&lt;ul>
&lt;li>A &lt;a class="link" href="https://iterm2.com/" target="_blank" rel="noopener"
>terminal&lt;/a>&lt;/li>
&lt;li>A &lt;a class="link" href="https://formulae.brew.sh/formula/openjdk" target="_blank" rel="noopener"
>Java installation&lt;/a>&lt;/li>
&lt;li>A &lt;a class="link" href="https://formulae.brew.sh/formula/gradle" target="_blank" rel="noopener"
>gradle installation&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="recipe-4">Recipe
&lt;/h3>&lt;ol>
&lt;li>&lt;code>mkdir myNewProject; cd myNewProject&lt;/code>&lt;/li>
&lt;li>Pull a version of the &lt;a class="link" href="https://github.com/JetBrains/amper/blob/release/0.4/docs/Usage.md#using-the-standalone-amper-version-from-the-command-line" target="_blank" rel="noopener"
>amper cli&lt;/a> with this command. Note the version number may change if you read this in the future.
&lt;code>curl -fsSL -o amper &amp;quot;https://packages.jetbrains.team/maven/p/amper/amper/org/jetbrains/amper/cli/0.4.0/cli-0.4.0-wrapper?download=true&amp;quot; &amp;amp;&amp;amp; chmod +x amper&lt;/code>&lt;/li>
&lt;li>&lt;code>./amper init jvm-cli&lt;/code> # to create a fresh jvm command line project&lt;/li>
&lt;li>&lt;code>./amper run&lt;/code> # to run the project&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-amper.png"
width="1248"
height="1136"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-amper_hu7645449443718543720.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-amper_hu666382034358010998.png 1024w"
loading="lazy"
alt="Amper init"
class="gallery-image"
data-flex-grow="109"
data-flex-basis="263px"
>&lt;/p>
&lt;p>The source is in src directly. It is a much shallower project structure.&lt;/p>
&lt;h3 id="adding-dependencies-4">Adding dependencies
&lt;/h3>&lt;p>You can add dependencies in the &lt;code>module.yaml&lt;/code> file in the &lt;a class="link" href="https://github.com/JetBrains/amper/blob/release/0.4/docs/DSLReference.md#dependencies-and-test-dependencies" target="_blank" rel="noopener"
>dependencies&lt;/a> section. The syntax is like this:&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-yaml" data-lang="yaml">&lt;span class="line">&lt;span class="cl">&lt;span class="nt">dependencies&lt;/span>&lt;span class="p">:&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="w"> &lt;/span>- &lt;span class="l">groupId:artifactId:version&lt;/span>&lt;span class="w">
&lt;/span>&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>You need to explicitly add a dependency but you have access to stdlib and kotlinx libraries.&lt;/p>
&lt;h1 id="ide-with-a-project-or-without">IDE with a project or without
&lt;/h1>&lt;p>This solution is for when you have the luxury of a computer where you can install tools such as Intellij, Fleet or Android Studio. These tools will come with prepackaged JDKs and wizards to get you going. You can of course use these tools with the CLI projects you created. They do offer a way to run code without having a project.&lt;/p>
&lt;h2 id="fleet">Fleet
&lt;/h2>&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-fleet.png"
width="1702"
height="1180"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-fleet_hu2271168381830310600.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-fleet_hu9079989743599176805.png 1024w"
loading="lazy"
alt="Fleet run"
class="gallery-image"
data-flex-grow="144"
data-flex-basis="346px"
>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/JetBrains/amper/blob/release/0.4/docs/Usage.md#using-amper-in-fleet" target="_blank" rel="noopener"
>Fleet supports Amper and Gradle&lt;/a>. Making new projects are still simplest with the command line instructions above. Then you can open the project in Fleet. The Fleet integration gives convenient run buttons in the gutter so you don&amp;rsquo;t need to any run configuration setup.&lt;/p>
&lt;h3 id="you-need-5">You need
&lt;/h3>&lt;ul>
&lt;li>A project created on the CLI as in the &lt;a class="link" href="#Amper" >previous step for Amper&lt;/a> or &lt;a class="link" href="#Gradle" >Gradle&lt;/a>&lt;/li>
&lt;li>A Fleet installation from Jetbrains Toolbox&lt;/li>
&lt;/ul>
&lt;h3 id="recipe-5">Recipe
&lt;/h3>&lt;ol>
&lt;li>Open the root folder of the project in Fleet&lt;/li>
&lt;li>Navigate to the &lt;code>main&lt;/code> method and use the gutter icon to run&lt;/li>
&lt;/ol>
&lt;h3 id="adding-dependencies-5">Adding dependencies
&lt;/h3>&lt;p>Add libraries in the same way as the CLI projects.&lt;/p>
&lt;h2 id="scratch-file">Scratch file
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.jetbrains.com/help/idea/scratches.html" target="_blank" rel="noopener"
>Scratch files&lt;/a> are usefull for transient code. They live in a folder that is independent of the project that you are in and so can be seen from any project you open. They are only supported in Intellij and Android studio.&lt;/p>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-scratch.png"
width="1326"
height="452"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-scratch_hu3292109826613980561.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-scratch_hu17000288150861323621.png 1024w"
loading="lazy"
alt="Scratch"
class="gallery-image"
data-flex-grow="293"
data-flex-basis="704px"
>&lt;/p>
&lt;h3 id="you-need-6">You need
&lt;/h3>&lt;ul>
&lt;li>Intellij Community/Android Studio, I use the &lt;a class="link" href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noopener"
>Jetbrains toolbox app&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="recipe-6">Recipe
&lt;/h3>&lt;ol>
&lt;li>Open the IDE and open any project or create a new kotlin one, this will setup a project but we won&amp;rsquo;t use it.&lt;/li>
&lt;li>Press &lt;code>Shift-Cmd-N&lt;/code> to open a new scratch file, choose Kotlin&lt;/li>
&lt;li>Paste the code press &lt;code>Ctrl + R&lt;/code> or the run button. See the screenshot.&lt;/li>
&lt;/ol>
&lt;h3 id="adding-dependencies-6">Adding dependencies
&lt;/h3>&lt;p>It is &lt;a class="link" href="https://www.jetbrains.com/help/idea/scratches.html#use-dependency-in-scratch-file" target="_blank" rel="noopener"
>possible to add dependencies&lt;/a> but you need to add it to the module in the project and then update the run configuration of the scratch file. This is probably more useful if you have a project setup.&lt;/p>
&lt;h2 id="intellij-enterprise-and-notebook">Intellij Enterprise and Notebook
&lt;/h2>&lt;p>Intellij Enterprise supports the Kotlin Notebook plugin. It is a similar experience as the &lt;a class="link" href="#Datalore" >Datalore&lt;/a> experience. The useful thing about a Notebook in Intellij is that you can also access code you may have in the project.&lt;/p>
&lt;h3 id="you-need-7">You need
&lt;/h3>&lt;ul>
&lt;li>Intellij Enterprise, I use the &lt;a class="link" href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noopener"
>Jetbrains toolbox app&lt;/a>&lt;/li>
&lt;li>The &lt;a class="link" href="https://plugins.jetbrains.com/plugin/16340-kotlin-notebook" target="_blank" rel="noopener"
>Kotlin Notebook plugin&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="recipe-7">Recipe
&lt;/h3>&lt;ol>
&lt;li>Open the IDE and open any project or create a new kotlin one, this will setup a project but we won&amp;rsquo;t use it.&lt;/li>
&lt;li>Press &lt;code>Cmd Shift A&lt;/code> and choose &lt;code>Kotlin Notebook&lt;/code>&lt;/li>
&lt;li>Paste the code in a new code cell&lt;/li>
&lt;li>press &lt;code>Shift +Enter&lt;/code> or the run button. See the screenshot.&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-notebook.png"
width="1672"
height="838"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-notebook_hu7643369559708669452.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-notebook_hu16508639288678114028.png 1024w"
loading="lazy"
alt="Notebook"
class="gallery-image"
data-flex-grow="199"
data-flex-basis="478px"
>&lt;/p>
&lt;h3 id="adding-dependencies-7">Adding dependencies
&lt;/h3>&lt;p>You can add &lt;a class="link" href="https://github.com/Kotlin/kotlin-jupyter#dependencies-resolving" target="_blank" rel="noopener"
>dependencies&lt;/a> like this:
&lt;code>@file:DependsOn(&amp;quot;groupId:artifactId:version&amp;quot;)&lt;/code>&lt;/p>
&lt;p>You can use your own project files in the Notebook by adding the project files to the notebook.&lt;/p>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-notebook-module.png"
width="978"
height="360"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-notebook-module_hu16855636725915719873.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-notebook-module_hu17896661954298364981.png 1024w"
loading="lazy"
alt="Notebook module"
class="gallery-image"
data-flex-grow="271"
data-flex-basis="652px"
>&lt;/p>
&lt;p>You can include some dependencies like &lt;a class="link" href="https://kotlin.github.io/kandy/welcome.html" target="_blank" rel="noopener"
>kandy&lt;/a> by using the &lt;code>%use&lt;/code> magic keyword.&lt;/p>
&lt;h1 id="ide-all-the-way">IDE all the way
&lt;/h1>&lt;p>This is the gui-est and most complete solution. Also the solution if you want to build a project that you want to work on. Of course you can use the CLI options but you can let the wizard create a template for you.&lt;/p>
&lt;h2 id="wizard">Wizard
&lt;/h2>&lt;p>The recipe is deceptively simple but I refer to the &lt;a class="link" href="https://www.jetbrains.com/help/idea/create-your-first-kotlin-app.html#create-project" target="_blank" rel="noopener"
>official docs for finer details&lt;/a>. I suspect no-one reads this far anyway. The wizard makes a gradle project and but if you would like to use Amper you need a plugin.&lt;/p>
&lt;h3 id="you-need-8">You need
&lt;/h3>&lt;ul>
&lt;li>Intellij /Android Studio, I use the &lt;a class="link" href="https://www.jetbrains.com/toolbox-app/" target="_blank" rel="noopener"
>Jetbrains toolbox app&lt;/a>&lt;/li>
&lt;/ul>
&lt;h3 id="recipe-8">Recipe
&lt;/h3>&lt;ol>
&lt;li>Open the IDE and open any project or create a new kotlin one&lt;/li>
&lt;li>Code and run&lt;/li>
&lt;/ol>
&lt;p>&lt;img src="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-wizard.png"
width="1592"
height="846"
srcset="https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-wizard_hu278655075275580216.png 480w, https://www.maiatoday.net/p/50-ways-to-run-some-kotlin-code/screenshot-wizard_hu9272542551474998889.png 1024w"
loading="lazy"
alt="Wizard"
class="gallery-image"
data-flex-grow="188"
data-flex-basis="451px"
>&lt;/p>
&lt;p>Dependencies work the same way as the CLI projects. There is also a project view to add them&lt;/p>
&lt;h1 id="what-next">What next?
&lt;/h1>&lt;p>Hmm I hear you say &amp;ldquo;But I want to draw pictures or graphs - no more ascii for me&amp;rdquo;&lt;/p>
&lt;p>You&amp;rsquo;ll have to wait for another blog post for more on that. This one is far too long already.&lt;/p>
&lt;p>In the meantime you have all these places to run your code. Now you can can go learn more Kotlin at these resources:&lt;/p>
&lt;h2 id="official-documentation">Official documentation
&lt;/h2>&lt;p>&lt;a class="link" href="https://kotlinlang.org/docs/home.html" target="_blank" rel="noopener"
>kotlinlang.org&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.youtube.com/c/kotlin" target="_blank" rel="noopener"
>kotlin youtube&lt;/a>&lt;/p>
&lt;h2 id="books">Books
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.manning.com/books/kotlin-in-action-second-edition" target="_blank" rel="noopener"
>Kotlin In Action, second edition&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://www.atomickotlin.com/atomickotlin/" target="_blank" rel="noopener"
>Atomic Kotlin&lt;/a> with matching &lt;a class="link" href="https://plugins.jetbrains.com/plugin/17654-atomickotlin?_gl=1*kliojt*_gcl_au*MTc2MDkwMjU0MC4xNzE5NjcwMzI3*_ga*MTk0MzI1MDcwOS4xNjk0OTgzMDA4*_ga_9J976DJZ68*MTcyMzM4Mzc3Ni45Mi4xLjE3MjMzODU0NzIuNTguMC4w" target="_blank" rel="noopener"
>training in the IDE&lt;/a>&lt;/p>
&lt;h2 id="free-courses">Free courses
&lt;/h2>&lt;p>&lt;a class="link" href="https://developer.android.com/codelabs/kotlin-bootcamp-welcome#0" target="_blank" rel="noopener"
>Kotlin Bootcamp&lt;/a>&lt;/p>
&lt;h2 id="practise-puzzles-koans-and-katas">Practise: Puzzles, Koans and Katas
&lt;/h2>&lt;p>&lt;a class="link" href="https://exercism.org/tracks/kotlin" target="_blank" rel="noopener"
>Exercism Kotlin track&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://adventofcode.com/" target="_blank" rel="noopener"
>Advent of code&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://kotlinlang.org/docs/koans.html" target="_blank" rel="noopener"
>Kotlin Koans&lt;/a>&lt;/p>
&lt;p>&lt;a class="link" href="https://github.com/emilybache/GildedRose-Refactoring-Kata/tree/main/Kotlin" target="_blank" rel="noopener"
>Gilded Rose in Kotlin&lt;/a>&lt;/p>
&lt;h2 id="newsletters">Newsletters
&lt;/h2>&lt;p>&lt;a class="link" href="https://kotlinweekly.net/#latest" target="_blank" rel="noopener"
>Kotlin Weekly&lt;/a>&lt;/p>
&lt;h2 id="more-on-notebooks">More on Notebooks
&lt;/h2>&lt;p>&lt;a class="link" href="https://www.youtube.com/watch?v=WdeCsUzv0c8&amp;amp;t=1026s" target="_blank" rel="noopener"
>Notebook Demo&lt;/a>&lt;/p></description></item><item><title>The Imitation Tortoise's song - a fleety conversion from imperative to functional - Will you join the dance?</title><link>https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/</link><pubDate>Sat, 10 Jun 2023 15:12:44 +0200</pubDate><guid>https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/</guid><description>&lt;img src="https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/mock_and_me.jpg" alt="Featured image of post The Imitation Tortoise's song - a fleety conversion from imperative to functional - Will you join the dance?" />&lt;h1 id="once-upon-a-time">Once upon a time
&lt;/h1>&lt;p>&lt;img src="https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/branches.png"
width="620"
height="370"
srcset="https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/branches_hu16196109654360759182.png 480w, https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/branches_hu15098751720921809370.png 1024w"
loading="lazy"
alt="branches"
class="gallery-image"
data-flex-grow="167"
data-flex-basis="402px"
>&lt;/p>
&lt;p>I admit. I have a penchant for word games and weird &lt;a class="link" href="https://www.merriam-webster.com/dictionary/segue" target="_blank" rel="noopener"
>segues&lt;/a>. So I will tell you what this post is about &lt;a class="link" href="https://dictionary.cambridge.org/dictionary/english/right-off-the-bat" target="_blank" rel="noopener"
>off the bat&lt;/a>. You can &lt;a class="link" href="#code-starts-here" >skip to the code&lt;/a>, I won&amp;rsquo;t be offended. &lt;a class="link" href="https://blog.jetbrains.com/fleet/2023/06/fleet-1-19-ai-powered-features-and-easier-configuration-for-rust-analyzer-python-interpreters-and-npm/" target="_blank" rel="noopener"
>Fleet 1.19 was released this week&lt;/a> with an integrated AI assistant. I took it for a spin and used it to convert Kotlin code from imperative style to functional and back again. I used some Kotlin code, which solves the &lt;a class="link" href="https://adventofcode.com/2022/day/10" target="_blank" rel="noopener"
>Advent of Code 2022 Day 10 puzzle&lt;/a>. I had written the solution in two styles and I had the AI assistant do the same conversion and compared the code. And then I played around and generated some poetry. Follow links at your peril, there are rabbit holes, it might make you &lt;a class="link" href="https://youtu.be/ZOLpCWlsCjw?t=21" target="_blank" rel="noopener"
>late&lt;/a> or &lt;a class="link" href="https://www.youtube.com/watch?v=pnJM_jC7j_4" target="_blank" rel="noopener"
>change the size&lt;/a> of your free time.&lt;/p>
&lt;h2 id="segue-the-first-of-many">Segue the first of many
&lt;/h2>&lt;p>Oh you are still here! You didn&amp;rsquo;t jump to the &lt;a class="link" href="#code-starts-here" >&lt;strong>code starts here&lt;/strong>&lt;/a> section? Why am I doing this? A long time ago, I read a lot of Lewis Caroll, Alice in Wonderland. In one scene Alice talks to the Mock Turtle. He sings a &lt;a class="link" href="https://en.wikipedia.org/wiki/The_Mock_Turtle%27s_Song" target="_blank" rel="noopener"
>song about sea creatures dancing&lt;/a>. When the first language translators appeared on the scene, &lt;a class="link" href="https://www.babelfish.com" target="_blank" rel="noopener"
>Altavisa babelfish&lt;/a> or perhaps it was the &lt;a class="link" href="https://en.wikipedia.org/wiki/Google_Translate" target="_blank" rel="noopener"
>early Google Translate&lt;/a>, I converted passages from Alice in Wonderland to French and then back again to see what the machines could do. The &lt;em>Mock Turtle&lt;/em> was transformed into an &lt;em>Imitation Tortoise&lt;/em>. In this way the reference to the original &lt;a class="link" href="https://en.wikipedia.org/wiki/Mock_turtle_soup" target="_blank" rel="noopener"
>mock turtle soup&lt;/a> was lost in translation. In a roundabout way I was wondering what would be uncovered or lost if I used the AI assistant for some translations in coding style.&lt;/p>
&lt;h2 id="couplets-of-doggerel">Couplets of doggerel
&lt;/h2>&lt;p>My trusty and non emotional assistant had no opinion on Lewis Caroll but it made this for me. A definition of &lt;strong>functional programming&lt;/strong> style in &lt;strong>rhyming couplets&lt;/strong>:&lt;/p>
&lt;blockquote>
&lt;p>Functional programming&amp;rsquo;s way,&lt;br>
treats functions as the play.&lt;/p>
&lt;p>Immutable states they use,&lt;br>
side effects they refuse.&lt;/p>
&lt;p>Declarative code is their choice,&lt;br>
with functions, they rejoice.&lt;/p>
&lt;p>Nested functions map, filter, reduce,&lt;br>
a clean, elegant code they produce.&lt;/p>
&lt;/blockquote>
&lt;p>Compare this with the &lt;strong>imperative&lt;/strong> version:&lt;/p>
&lt;blockquote>
&lt;p>Imperative code, step by step,&lt;br>
commands the flow, with every rep.&lt;/p>
&lt;p>Variables mutate, tracking state,&lt;br>
loops and branches, integrate.&lt;/p>
&lt;p>In sequence order, let it be,&lt;br>
line-by-line, instructions see.&lt;/p>
&lt;p>Procedural paths and simple tweaks,&lt;br>
It&amp;rsquo;s the classic style, for codes that speak.&lt;/p>
&lt;/blockquote>
&lt;p>&lt;a class="link" href="https://www.etymonline.com/word/pshaw" target="_blank" rel="noopener"
>Pshaw!&lt;/a> verbose &lt;a class="link" href="https://www.merriam-webster.com/dictionary/doggerel" target="_blank" rel="noopener"
>doggerel&lt;/a> you respond, ok here&amp;rsquo;s &amp;hellip; a &lt;a class="link" href="https://www.readpoetry.com/10-vivid-haikus-to-leave-you-breathless/" target="_blank" rel="noopener"
>&lt;strong>haiku&lt;/strong>&lt;/a>&lt;/p>
&lt;h2 id="5-7-5">5-7-5
&lt;/h2>&lt;blockquote>
&lt;p>&lt;strong>Functional&lt;/strong>&lt;/p>
&lt;p>Functions pure, combined, (5)&lt;br>
Immutable state and grace, (7)&lt;br>
Elegance defined. (5)&lt;/p>
&lt;/blockquote>
&lt;blockquote>
&lt;p>&lt;strong>Imperative&lt;/strong>&lt;/p>
&lt;p>Commands in sequence, (5)&lt;br>
Changing state and execution, (8! or is it 7?)&lt;br>
Steps guide its progress. (5)&lt;/p>
&lt;/blockquote>
&lt;h1 id="code-starts-here">Code starts here
&lt;/h1>&lt;h2 id="imperative-all-the-way---hand-crafted-by-me">Imperative all the way - hand crafted by me
&lt;/h2>&lt;p>&lt;a class="link" href="https://github.com/maiatoday/imp-fun/blob/imperativeByMe/src/main/kotlin/Main.kt" target="_blank" rel="noopener"
>Here&lt;/a> is my initial hand written imperative solution to the AoC 2022 Day 10 CRT problem. There are many &lt;a class="link" href="https://github.com/elizarov/AdventOfCode2022/commit/9353b60158a9690c8517acd40fefe29ccee7f0bd" target="_blank" rel="noopener"
>succinct&lt;/a> and &lt;a class="link" href="https://todd.ginsberg.com/post/advent-of-code/2021/day10/" target="_blank" rel="noopener"
>elegant&lt;/a> &lt;a class="link" href="https://github.com/topics/aoc-2022-in-kotlin" target="_blank" rel="noopener"
>solutions&lt;/a> by other people out there. For this exploration, the changing shape of the code is what interests me. Also to know if the solution is good it needs to have the same output on my input set.
&lt;img src="https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/elplzgzl.png"
width="1098"
height="364"
srcset="https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/elplzgzl_hu16646297295889542392.png 480w, https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/elplzgzl_hu6346563232570383285.png 1024w"
loading="lazy"
alt="ELPLZGZL"
class="gallery-image"
data-flex-grow="301"
data-flex-basis="723px"
>&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="nn">java.io.File&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">crtW&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">40&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">crtH&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Instruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">ticks&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">inc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">crtDisplay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">instructions&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">buildList&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// transform a list of Strings to a list of Instructions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// transform String to Instruction
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">opcode&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substringBefore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">instruction&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;noop&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;addx&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ticks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inc&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substringAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">toInt&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;oops&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instruction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">xRegisterAtTick&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">buildList&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// transform instructions to x register values
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">var&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">// needs a running x register value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">instructions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ticks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">inc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="n">until&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">crtW&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">crtH&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="c1">// transform xRegister values to pixels(String)
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// chop up in lines
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="c1">// side effect: print pixels
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">crtW&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//&amp;lt;============ side effect
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">mod&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">crtW&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">xRegisterAtTick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">xRegisterAtTick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="s2">&amp;#34;🔴&amp;#34;&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;⚫️&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="c1">//&amp;lt;============ side effect
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">testInput&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Day_test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; ============== test input =============&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">crtDisplay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testInput&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;============== real input ==============&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">input&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Day&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">crtDisplay&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;src/main/resources/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2">.txt&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">readLines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="the-recipe">The recipe
&lt;/h2>&lt;p>You can see my conversion steps in the git repo. The recipe is:&lt;br>
&lt;strong>Ingredients:&lt;/strong>&lt;/p>
&lt;ul>
&lt;li>1 problem&lt;/li>
&lt;li>1 working imperative solution&lt;/li>
&lt;li>tests to taste&lt;/li>
&lt;/ul>
&lt;p>&lt;strong>Method:&lt;/strong>&lt;/p>
&lt;ol>
&lt;li>&lt;em>Separate&lt;/em> the variables that &lt;strong>change&lt;/strong> from the code that does something.&lt;/li>
&lt;li>&lt;em>Separate&lt;/em> the &lt;strong>side effect&lt;/strong> code from the code that does something.&lt;/li>
&lt;li>&lt;em>Chop&lt;/em> the doing code, identified in the previous steps, into bite sized chunks and wrap in small &lt;strong>pure functions&lt;/strong>.&lt;/li>
&lt;li>&lt;em>Replace loops&lt;/em> with composed calls such as &lt;em>map&lt;/em>, &lt;em>filter&lt;/em>, &lt;em>reduce&lt;/em> calling the pure functions as higher order functions as needed to obtain the same result as the original.&lt;/li>
&lt;/ol>
&lt;p>&lt;strong>Build&lt;/strong> gently for a few seconds in a preheated &lt;strong>gradle&lt;/strong> command, until &lt;strong>BUILD SUCCESSFUL&lt;/strong> and serve immediately.&lt;/p>
&lt;p>Of course this recipe is an over simplification and build times may vary depending on how big the code is and if you are doing this on a &lt;a class="link" href="https://forums.raspberrypi.com/viewtopic.php?t=183665" target="_blank" rel="noopener"
>Rasberry PI model B&lt;/a>.&lt;/p>
&lt;h2 id="heres-one-i-prepared-earlier---hand-written-and-functional">Here&amp;rsquo;s one I prepared earlier - hand written and functional
&lt;/h2>&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="nn">java.io.File&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">crtW&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">40&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Instruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">ticks&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">inc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">String&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toInstruction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">substringBefore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;noop&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;addx&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ticks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inc&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">substringAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">toInt&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;oops&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">Instruction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expandInstruction&lt;/span>&lt;span class="p">():&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">buildList&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">repeat&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="nd">@expandInstruction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ticks&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">this&lt;/span>&lt;span class="nd">@expandInstruction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">inc&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">Int&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toPixel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">crtW&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">String&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span> &lt;span class="p">%&lt;/span> &lt;span class="n">width&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="k">this&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="k">this&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="s2">&amp;#34;🔴&amp;#34;&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;⚫️&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">crtScan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;,&lt;/span> &lt;span class="n">width&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">crtW&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toInstruction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span>&lt;span class="c1">// converts input to instruction
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">flatMap&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">i&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">expandInstruction&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// expands multi tick instructions
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">runningFold&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// runs through the instructions accumulating x
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">mapIndexed&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">index&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">x&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">toPixel&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">index&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// converts index and x register to a pixel
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="p">.&lt;/span>&lt;span class="n">chunked&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">width&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="k">it&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">joinToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">}&lt;/span> &lt;span class="c1">// spilt into lines for the screen
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;.&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">()&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="c1">// side effect method
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">this&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">forEach&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">it&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">testInput&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Day_test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; ============== test input =============&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">crtScan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testInput&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;============== real input ==============&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">input&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Day&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">crtScan&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">display&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;src/main/resources/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2">.txt&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">readLines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h2 id="ai-converts-to-functional">AI converts to functional
&lt;/h2>&lt;p>AI Assistant converts my imperative version to functional&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="n">mport&lt;/span> &lt;span class="n">java&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">io&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">File&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">crtW&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">40&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">crtH&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Instruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">ticks&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">inc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">parseInstruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Instruction&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">opcode&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substringBefore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;noop&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;addx&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ticks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inc&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substringAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">toInt&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;oops&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">buildXRegisterAtTick&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instructions&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="p">&amp;gt;):&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">// needs a running x register value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">return&lt;/span> &lt;span class="n">instructions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">flatMap&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">instruction&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">List&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instruction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ticks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="p">}.&lt;/span>&lt;span class="n">apply&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">instruction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">inc&lt;/span> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">x&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">printCRT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">instructions&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">map&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="o">::&lt;/span>&lt;span class="n">parseInstruction&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">xRegisterAtTick&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">buildXRegisterAtTick&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instructions&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">crtRows&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">crtW&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">crtH&lt;/span> &lt;span class="n">until&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="n">step&lt;/span> &lt;span class="p">-&lt;/span>&lt;span class="n">crtW&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">reversed&lt;/span>&lt;span class="p">().&lt;/span>&lt;span class="n">map&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">lineStart&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">(&lt;/span>&lt;span class="n">lineStart&lt;/span> &lt;span class="n">until&lt;/span> &lt;span class="n">lineStart&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="n">crtW&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">joinToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span> &lt;span class="n">i&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="p">%&lt;/span> &lt;span class="n">crtW&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">xRegisterAtTick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">xRegisterAtTick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="s2">&amp;#34;🔴&amp;#34;&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="s2">&amp;#34;⚫️&amp;#34;&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">crtRows&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">joinToString&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">testInput&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Day_test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; ============== test input =============&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printCRT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testInput&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;============== real input ==============&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">input&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Day&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printCRT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;src/main/resources/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2">.txt&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">readLines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;p>Oh dear, this doesn&amp;rsquo;t work!
&lt;img src="https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/oops.png"
width="1596"
height="308"
srcset="https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/oops_hu7189020701187576033.png 480w, https://www.maiatoday.net/p/the-imitation-tortoises-song-a-fleety-conversion-from-imperative-to-functional-will-you-join-the-dance/oops_hu13531548384970467157.png 1024w"
loading="lazy"
alt="Oops"
class="gallery-image"
data-flex-grow="518"
data-flex-basis="1243px"
>
Some issue with the loop not using a downTo and getting the ranges wrong. I like the separate functions but it is mixing in some side effects.&lt;/p>
&lt;h2 id="ai-converts-back-to-imperative">AI converts back to imperative
&lt;/h2>&lt;p>AI assistant converts my functional version to imperative&lt;/p>
&lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-kotlin" data-lang="kotlin">&lt;span class="line">&lt;span class="cl">&lt;span class="k">import&lt;/span> &lt;span class="nn">java.io.File&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">main&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">args&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Array&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">crtW&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">40&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">crtH&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">6&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">data&lt;/span> &lt;span class="k">class&lt;/span> &lt;span class="nc">Instruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="k">val&lt;/span> &lt;span class="py">ticks&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="k">val&lt;/span> &lt;span class="py">inc&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">Int&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">parseInstruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">):&lt;/span> &lt;span class="n">Instruction&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">opcode&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substringBefore&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="k">when&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">opcode&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;noop&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="s2">&amp;#34;addx&amp;#34;&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">Instruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">ticks&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">2&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="n">inc&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">s&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">substringAfter&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; &amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">toInt&lt;/span>&lt;span class="p">())&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">else&lt;/span> &lt;span class="o">-&amp;gt;&lt;/span> &lt;span class="n">error&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;oops&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">buildXRegisterAtTick&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instructions&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="p">&amp;gt;):&lt;/span> &lt;span class="n">MutableList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">xRegisterAtTick&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mutableListOf&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Int&lt;/span>&lt;span class="p">&amp;gt;()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">var&lt;/span> &lt;span class="py">x&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="m">1&lt;/span> &lt;span class="c1">// needs a running x register value
&lt;/span>&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="c1">&lt;/span> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">instruction&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">instructions&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="n">until&lt;/span> &lt;span class="n">instruction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">ticks&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">xRegisterAtTick&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">x&lt;/span> &lt;span class="o">+=&lt;/span> &lt;span class="n">instruction&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">inc&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">xRegisterAtTick&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">x&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">return&lt;/span> &lt;span class="n">xRegisterAtTick&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">fun&lt;/span> &lt;span class="nf">printCRT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">List&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">String&lt;/span>&lt;span class="p">&amp;gt;)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">instructions&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">MutableList&lt;/span>&lt;span class="p">&amp;lt;&lt;/span>&lt;span class="n">Instruction&lt;/span>&lt;span class="p">&amp;gt;&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">mutableListOf&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">instructions&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">add&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">parseInstruction&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">s&lt;/span>&lt;span class="p">))&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">xRegisterAtTick&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">buildXRegisterAtTick&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">instructions&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">for&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="m">0&lt;/span> &lt;span class="n">until&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">crtW&lt;/span> &lt;span class="p">*&lt;/span> &lt;span class="n">crtH&lt;/span>&lt;span class="p">))&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="p">%&lt;/span> &lt;span class="n">crtW&lt;/span> &lt;span class="o">==&lt;/span> &lt;span class="m">0&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">if&lt;/span> &lt;span class="p">(&lt;/span>&lt;span class="n">i&lt;/span> &lt;span class="p">%&lt;/span> &lt;span class="n">crtW&lt;/span> &lt;span class="k">in&lt;/span> &lt;span class="n">xRegisterAtTick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">-&lt;/span> &lt;span class="m">1.&lt;/span>&lt;span class="p">.&lt;/span>&lt;span class="n">xRegisterAtTick&lt;/span>&lt;span class="p">[&lt;/span>&lt;span class="n">i&lt;/span>&lt;span class="p">]&lt;/span> &lt;span class="p">+&lt;/span> &lt;span class="m">1&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;🔴&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span> &lt;span class="k">else&lt;/span> &lt;span class="p">{&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">print&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;⚫️&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">testInput&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Day_test&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34; ============== test input =============&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printCRT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">testInput&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;============== real input ==============&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="k">val&lt;/span> &lt;span class="py">input&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;Day&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">printCRT&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">input&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl"> &lt;span class="n">println&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="se">\n\n&lt;/span>&lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="p">)&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="p">}&lt;/span>
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">
&lt;/span>&lt;/span>&lt;span class="line">&lt;span class="cl">&lt;span class="k">fun&lt;/span> &lt;span class="nf">readInput&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="n">name&lt;/span>&lt;span class="p">:&lt;/span> &lt;span class="n">String&lt;/span>&lt;span class="p">)&lt;/span> &lt;span class="p">=&lt;/span> &lt;span class="n">File&lt;/span>&lt;span class="p">(&lt;/span>&lt;span class="s2">&amp;#34;src/main/resources/&amp;#34;&lt;/span>&lt;span class="p">,&lt;/span> &lt;span class="s2">&amp;#34;&lt;/span>&lt;span class="si">$name&lt;/span>&lt;span class="s2">.txt&amp;#34;&lt;/span>&lt;span class="p">).&lt;/span>&lt;span class="n">readLines&lt;/span>&lt;span class="p">()&lt;/span>
&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>&lt;h1 id="the-end">The end
&lt;/h1>&lt;p>To close I leave you with a &lt;a class="link" href="https://github.com/maiatoday/imp-fun/branches" target="_blank" rel="noopener"
>git repo&lt;/a> and these lines of sage advice in doggerel format from the AI assistant. What can I say, I am amused!&lt;/p>
&lt;blockquote>
&lt;p>Functional&amp;rsquo;s not a cure-all,&lt;br>
For some problems, it may stall.&lt;/p>
&lt;p>Yet, grasp its ways, and you&amp;rsquo;ll see,&lt;br>
Cleaner code and clarity.&lt;/p>
&lt;p>Incorporate with grace and skill,&lt;br>
More maintainable code, you&amp;rsquo;ll build.&lt;/p>
&lt;/blockquote>
&lt;p>And as a bonus here&amp;rsquo;s the prompt that generated this gem.&lt;/p>
&lt;pre tabindex="0">&lt;code>Take the coding advice in quotes and convert it to rhyming couplets
&amp;#34;Keep in mind that functional programming may not always be the best choice
for every problem or coding style, but understanding and
incorporating functional concepts can help create cleaner, more maintainable code.&amp;#34;
&lt;/code>&lt;/pre></description></item><item><title>Four of a Kotlin Kind at I code Java 2022 conference</title><link>https://www.maiatoday.net/p/four-of-a-kotlin-kind-at-i-code-java-2022-conference/</link><pubDate>Fri, 14 Oct 2022 10:30:41 +0200</pubDate><guid>https://www.maiatoday.net/p/four-of-a-kotlin-kind-at-i-code-java-2022-conference/</guid><description>&lt;img src="https://www.maiatoday.net/p/four-of-a-kotlin-kind-at-i-code-java-2022-conference/icj2022.jpg" alt="Featured image of post Four of a Kotlin Kind at I code Java 2022 conference" />&lt;p>I shared my talk titled Imperative, Declarative, Object oriented, functional: Four of a Kotlin Kind at the &lt;a class="link" href="https://j-sa.co/schedule-java/" target="_blank" rel="noopener"
>I code Java conference&lt;/a>.&lt;/p>
&lt;p>The abstract:
Is Kotlin a functional language? Yes, but&amp;hellip; Is it object oriented? Yes, but&amp;hellip;
Looking at four concepts: imperative, declarative, functional and object oriented
How does Kotlin make it easy to use either or all at the same time. This talk contains: Some useful Kotlin tips, some guidelines and pitfalls for the four concepts, traces of definitions and software history. After listening to this talk you will understand what these concepts are, what each is good for and how they are supported by the Kotlin language.&lt;/p>
&lt;p>You can see the talk here&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/GY3ImFPfaRI"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div></description></item><item><title>Rust vs Kotlin panel discussion</title><link>https://www.maiatoday.net/p/rust-vs-kotlin-panel-discussion/</link><pubDate>Thu, 28 Oct 2021 16:21:43 +0200</pubDate><guid>https://www.maiatoday.net/p/rust-vs-kotlin-panel-discussion/</guid><description>&lt;p>Panel discussion on Rust and Kotlin for GDG Cape Town&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/Xr1TtmUxcOI"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div></description></item><item><title>Testing Kotlin Coroutines</title><link>https://www.maiatoday.net/p/testing-kotlin-coroutines/</link><pubDate>Sun, 08 Dec 2019 06:47:30 +0200</pubDate><guid>https://www.maiatoday.net/p/testing-kotlin-coroutines/</guid><description>&lt;img src="https://www.maiatoday.net/p/testing-kotlin-coroutines/timeMachine.png" alt="Featured image of post Testing Kotlin Coroutines" />&lt;p>How to test kotlin coroutines by injecting dispatchers and using the testing apis. No one wants flakey tests and I want a time machine.&lt;/p>
&lt;div class="video-wrapper">
&lt;iframe loading="lazy"
src="https://www.youtube.com/embed/E-1n_AmlVjE"
allowfullscreen
title="YouTube Video"
>
&lt;/iframe>
&lt;/div></description></item></channel></rss>